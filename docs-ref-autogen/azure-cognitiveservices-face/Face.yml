### YamlMime:UniversalReference
ms.openlocfilehash: 5b2dcbac70d3d42b4477c37100171c12991de94f
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 12/13/2018
ms.locfileid: "52150927"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detectWithStream
  - azure-cognitiveservices-face.Face.detectWithStream_2
  - azure-cognitiveservices-face.Face.detectWithStream_1
  - azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithUrl
  - azure-cognitiveservices-face.Face.detectWithUrl_2
  - azure-cognitiveservices-face.Face.detectWithUrl_1
  - azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToFace
  - azure-cognitiveservices-face.Face.verifyFaceToFace_2
  - azure-cognitiveservices-face.Face.verifyFaceToFace_1
  - azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyFaceToPerson
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  - azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  - azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream
  name: detectWithStream(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        イメージ ストリーム。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_2
  name: detectWithStream(stream.Readable, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithStream(image: stream.Readable, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStream_1
  name: detectWithStream(stream.Readable, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithStreamWithHttpOperationResponse
  name: detectWithStreamWithHttpOperationResponse(stream.Readable, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithStreamWithHttpOperationResponse(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        イメージ ストリーム。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl
  name: detectWithUrl(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithUrl(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        イメージの URL をパブリックに到達可能
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_2
  name: detectWithUrl(string, Object, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithUrl(url: string, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrl_1
  name: detectWithUrl(string, ServiceCallback<DetectedFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithUrlWithHttpOperationResponse
  name: detectWithUrlWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。
  syntax:
    content: 'function detectWithUrlWithHttpOperationResponse(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: >
        イメージの URL をパブリックに到達可能
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 顔の faceId を指定するには、faceId 配列や顔リスト、大規模な顔リストから似ている顔を検索します。
  syntax:
    content: 'function findSimilar(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        クエリの表面の FaceId します。 ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。 この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar(string, Object, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 顔の faceId を指定するには、faceId 配列や顔リスト、大規模な顔リストから似ている顔を検索します。
  syntax:
    content: 'function findSimilar(faceId: string, options: Object, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar(string, ServiceCallback<SimilarFace[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 顔の faceId を指定するには、faceId 配列や顔リスト、大規模な顔リストから似ている顔を検索します。
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse(string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 顔の faceId を指定するには、faceId 配列や顔リスト、大規模な顔リストから似ている顔を検索します。
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        クエリの表面の FaceId します。 ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。 この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 候補の面を face の類似性に基づいてグループに分割します。
  syntax:
    content: 'function group(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        候補 faceId の配列を作成して顔 - を検出します。

        最大値は、顔 1000 個です。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group(string[], Object, ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 候補の面を face の類似性に基づいてグループに分割します。
  syntax:
    content: 'function group(faceIds: string[], options: Object, callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group(string[], ServiceCallback<GroupResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 候補の面を face の類似性に基づいてグループに分割します。
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 候補の面を face の類似性に基づいてグループに分割します。
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        候補 faceId の配列を作成して顔 - を検出します。

        最大値は、顔 1000 個です。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: ユーザー グループまたは大きなユーザー グループから特定のクエリの個人の顔の最も近い一致を検索する 1 対多の id。
  syntax:
    content: 'function identify(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        クエリの配列に直面して顔によって作成された faceIds - を検出します。 面の各識別しない個別にされます。 FaceIds の有効な番号が [1, 10]。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify(string[], Object, ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: ユーザー グループまたは大きなユーザー グループから特定のクエリの個人の顔の最も近い一致を検索する 1 対多の id。
  syntax:
    content: 'function identify(faceIds: string[], options: Object, callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify(string[], ServiceCallback<IdentifyResult[]>)
  children: []
  type: method
  langs:
  - typeScript
  summary: ユーザー グループまたは大きなユーザー グループから特定のクエリの個人の顔の最も近い一致を検索する 1 対多の id。
  syntax:
    content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse(string[], Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: ユーザー グループまたは大きなユーザー グループから特定のクエリの個人の顔の最も近い一致を検索する 1 対多の id。
  syntax:
    content: 'function identifyWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        クエリの配列に直面して顔によって作成された faceIds - を検出します。 面の各識別しない個別にされます。 FaceIds の有効な番号が [1, 10]。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace
  name: verifyFaceToFace(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうか、または 1 つの面がユーザーに属しているかどうかを確認します。
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        最初の面の faceId 顔に由来 - 検出
    - id: faceId2
      type:
      - string
      description: >
        2 番目の顔の faceId 顔に由来 - 検出
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_2
  name: verifyFaceToFace(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうか、または 1 つの面がユーザーに属しているかどうかを確認します。
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFace_1
  name: verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうか、または 1 つの面がユーザーに属しているかどうかを確認します。
  syntax:
    content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToFaceWithHttpOperationResponse
  name: verifyFaceToFaceWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうか、または 1 つの面がユーザーに属しているかどうかを確認します。
  syntax:
    content: 'function verifyFaceToFaceWithHttpOperationResponse(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        最初の面の faceId 顔に由来 - 検出
    - id: faceId2
      type:
      - string
      description: >
        2 番目の顔の faceId 顔に由来 - 検出
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson
  name: verifyFaceToPerson(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうかを確認します。 Face Id とユーザー Id を比較します。
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        顔に由来、顔の FaceId - 検出
    - id: personId
      type:
      - string
      description: >
        ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。 personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_2
  name: verifyFaceToPerson(string, string, Object, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうかを確認します。 Face Id とユーザー Id を比較します。
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPerson_1
  name: verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうかを確認します。 Face Id とユーザー Id を比較します。
  syntax:
    content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyFaceToPersonWithHttpOperationResponse
  name: verifyFaceToPersonWithHttpOperationResponse(string, string, Object)
  children: []
  type: method
  langs:
  - typeScript
  summary: 2 つの顔が同一人物に属しているかどうかを確認します。 Face Id とユーザー Id を比較します。
  syntax:
    content: 'function verifyFaceToPersonWithHttpOperationResponse(faceId: string, personId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        顔に由来、顔の FaceId - 検出
    - id: personId
      type:
      - string
      description: >
        ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。 personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  name: DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  name: DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFace[]>
  name: SimilarFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFace[]>>
  name: SimilarFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFace
    fullName: SimilarFace
    uid: azure-cognitiveservices-face.SimilarFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResult>
  name: GroupResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResult>>
  name: GroupResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResult
    fullName: GroupResult
    uid: azure-cognitiveservices-face.GroupResult
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResult[]>
  name: IdentifyResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResult[]>>
  name: IdentifyResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResult
    fullName: IdentifyResult
    uid: azure-cognitiveservices-face.IdentifyResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  name: VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  name: VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'

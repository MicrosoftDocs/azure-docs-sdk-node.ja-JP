### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: 顔を表すクラスです。
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: イメージ ストリーム。
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: 省略可能なパラメーター
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      画像内の人間の顔を検出して、顔を示す四角形を返します。必要に応じて、FaceId、ランドマーク、および属性も返します。<br />
      * イメージは格納されません。 抽出された顔機能のみをサーバーに格納されます。 FaceId face 機能の識別子し、で使用される[直面 - 識別](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)、[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)、および [顔
      - Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) を検索します。
      ストアドの顔の機能では、有効期限が切れるし、検出の元の呼び出し後 24 時間に削除されます。
      * 省略可能なパラメーターには、faceId、ランドマーク、および属性が含まれます。 属性には、年齢、性別、headPose、気に入った機能、facialHair、眼鏡、emotion、髪、構成、オクルー ジョン、[アクセサリ]、ぼかし、露出とノイズが含まれます。 特定の属性に対して返される結果の一部を正確なできない可能性があります。
      * JPEG、PNG、GIF (最初のフレーム) および BMP 形式がサポートされています。 許可されているイメージ ファイルのサイズは、1 KB から 6 MB です。
      * イメージの最大 100 の顔を返すことができます。 小から大規模な顔四角形のサイズによっては、顔が順位付け。
      * クエリを実行するときに最適な結果を得る[直面 - 識別](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)、[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)、および [顔
      - Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' は true) を検索は顔を使用してください: 正面、クリア、および最小サイズ 200 x 200 ピクセル (目の間に 100 ピクセル単位)。
      * 検出可能な顔の最小サイズは、1920 x 1080 ピクセルを超えるイメージで 36 x 36 ピクセルです。
      1920 x 1080 ピクセルよりも高いイメージには、比例して顔の最小サイズが必要です。
      * 異なる 'detectionModel' の値を指定することができます。 使用して、さまざまな検出モデルの比較を参照してください[検出モデルを指定する方法](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | モデル | 使用をお勧めします-case(s) |
      | ---------- | -------- |
      | 'detection_01': | [フェイス - の既定の検出モデル
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) します。 ほぼ正面の顔の検出をお勧めします。 角度が非常に大きい (頭部姿勢) 面、閉塞面または正しくないイメージの向きとシナリオは、このような場合に顔が検出されない可能性があります。 | |'detection_02': |2019 でリリースされた検出モデルは、特に小規模、側、画像がぼやける顔の正確さの向上の可能性があります。 |
      * 異なる 'recognitionModel' 値が提供されます。 フォロー アップ操作などの確認、識別する場合と同様の検索が必要な 'recognitionModel' パラメーターを使用して認識モデルを指定してください。 'RecognitionModel' の既定値は 'recognition_01' が場合、このパラメーターにする必要があるモデルが最新モデルに明示的に指定されることが必要なしてください。 指定されると、検出された faceIds は指定された認識モデルに関連付けられてなります。 詳細についてを参照してください[認識モデルを指定する方法](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
      | モデル | 使用をお勧めします-case(s) |
      | ---------- | -------- |
      | 'recognition_01': | [フェイス - の既定の認識モデル
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) します。 これらすべての faceIds 2019 年 3 月より前に作成は、この認識モデルで結合されます。 | |'recognition_02': |2019 年 3 月にリリースされた認識モデル。 'recognition_01' と比較対象の全体的な精度が向上するためには、'recognition_02' をお勧めします。 |
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: イメージ ストリーム。
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: イメージ ストリーム。
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: イメージの URL をパブリックに到達可能
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: 省略可能なパラメーター
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      画像内の人間の顔を検出して、顔を示す四角形を返します。必要に応じて、FaceId、ランドマーク、および属性も返します。<br />
      * イメージは格納されません。 抽出された顔機能のみをサーバーに格納されます。 FaceId face 機能の識別子し、で使用される[直面 - 識別](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)、[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)、および [顔
      - Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) を検索します。
      ストアドの顔の機能では、有効期限が切れるし、検出の元の呼び出し後 24 時間に削除されます。
      * 省略可能なパラメーターには、faceId、ランドマーク、および属性が含まれます。 属性には、年齢、性別、headPose、気に入った機能、facialHair、眼鏡、emotion、髪、構成、オクルー ジョン、[アクセサリ]、ぼかし、露出とノイズが含まれます。 特定の属性に対して返される結果の一部を正確なできない可能性があります。
      * JPEG、PNG、GIF (最初のフレーム) および BMP 形式がサポートされています。 許可されているイメージ ファイルのサイズは、1 KB から 6 MB です。
      * イメージの最大 100 の顔を返すことができます。 小から大規模な顔四角形のサイズによっては、顔が順位付け。
      * クエリを実行するときに最適な結果を得る[直面 - 識別](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)、[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)、および [顔
      - Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) ('returnFaceId' は true) を検索は顔を使用してください: 正面、クリア、および最小サイズ 200 x 200 ピクセル (目の間に 100 ピクセル単位)。
      * 検出可能な顔の最小サイズは、1920 x 1080 ピクセルを超えるイメージで 36 x 36 ピクセルです。
      1920 x 1080 ピクセルよりも高いイメージには、比例して顔の最小サイズが必要です。
      * 異なる 'detectionModel' の値を指定することができます。 使用して、さまざまな検出モデルの比較を参照してください[検出モデルを指定する方法](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | モデル | 使用をお勧めします-case(s) |
      | ---------- | -------- |
      | 'detection_01': | [フェイス - の既定の検出モデル
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) します。 ほぼ正面の顔の検出をお勧めします。 角度が非常に大きい (頭部姿勢) 面、閉塞面または正しくないイメージの向きとシナリオは、このような場合に顔が検出されない可能性があります。 | |'detection_02': |2019 でリリースされた検出モデルは、特に小規模、側、画像がぼやける顔の正確さの向上の可能性があります。 |
      * 異なる 'recognitionModel' 値が提供されます。 フォロー アップ操作などの確認、識別する場合と同様の検索が必要な 'recognitionModel' パラメーターを使用して認識モデルを指定してください。 'RecognitionModel' の既定値は 'recognition_01' が場合、このパラメーターにする必要があるモデルが最新モデルに明示的に指定されることが必要なしてください。 指定されると、検出された faceIds は指定された認識モデルに関連付けられてなります。 詳細についてを参照してください[認識モデルを指定する方法](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
      | モデル | 使用をお勧めします-case(s) |
      | ---------- | -------- |
      | 'recognition_01': | [フェイス - の既定の認識モデル
      Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236) します。 これらすべての faceIds 2019 年 3 月より前に作成は、この認識モデルで結合されます。 | |'recognition_02': |2019 年 3 月にリリースされた認識モデル。 'recognition_01' と比較対象の全体的な精度が向上するためには、'recognition_02' をお勧めします。 |
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: イメージの URL をパブリックに到達可能
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: イメージの URL をパブリックに到達可能
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: 面を作成します。
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            サービス クライアントへの参照。
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: クエリの表面の FaceId します。 ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。 この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: 省略可能なパラメーター
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      与えられたクエリの顔の faceId に対して、faceId 配列、顔リスト、または大規模顔リストから類似の顔を検索します。 faceId 配列には、によって作成された顔が含まれています。[直面 - 検出](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)、が 24 時間の作成後に期限が切れます。 "FaceListId"がによって作成された[FaceList - 作成](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)は期限切れ persistedFaceIds を格納しています。 "LargeFaceListId"がによって作成されたと[LargeFaceList - 作成](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)も期限切れ persistedFaceIds を格納しています。 入力によって返されるような顔リストには、faceIds または類似性によってランク付けされた persistedFaceIds が含まれています。
      <br/>同様の検索には、2 つの作業モード、"matchPerson"と"matchFace"があります。 "matchPerson"は、同一人物の内部しきい値を使用して、可能な限り同じ人の顔を検出しようとする既定モードです。 既知の人の他の写真を検索すると便利です。 顔が内部しきい値を渡されない場合、空のリストが返されることに注意してください。 同一人物のしきい値およびとにかくと似た顔をランク付けを返します。"matchFace"モードは無視されますも類似性が低い。 これは、有名人風の顔を検索するようなケースで使用できます。
      <br/>関連付けられたクエリ面の faceId 'recognitionModel' ターゲット faceId 配列や顔リスト、大規模な顔リストで使用される 'recognitionModel' と同じことがあります。
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: クエリの表面の FaceId します。 ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。 この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: クエリの表面の FaceId します。 ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。 この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      顔の類似性に基づいて候補の顔をグループ分けします。<br />
      * 出力は、1 つまたは複数の不整合な顔のグループと、messyGroup です。 顔のグループを持つような検索、多くの場合、同一人物の顔が含まれています。 顔のグループはグループのサイズ、顔の数などによって順位付けされます。 顔が同一人物に属しているが、結果のいくつかのグループに分割される場合があることに注意してください。
      * MessyGroup は、特別な顔を元の面からのような対応面が見つからないことを示す面を含むグループです。 MessyGroup は、すべての顔検出、対応する場合、結果は表示されません。
      * グループの API には最大で少なくとも 2 つの候補の面から 1000 が必要があります。 お勧め[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)である場合に 2 つの候補の面です。
      * 関連付けられたクエリ面の faceIds 'recognitionModel' は同じである必要があります。
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 候補 faceId の配列を作成して顔 - を検出します。 最大値は、顔 1000 個です。
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 候補 faceId の配列を作成して顔 - を検出します。 最大値は、顔 1000 個です。
        - id: options
          type:
            - RequestOptionsBase
          description: 省略可能なパラメーター
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 候補 faceId の配列を作成して顔 - を検出します。 最大値は、顔 1000 個です。
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'クエリの配列に直面して顔によって作成された faceIds - を検出します。 面の各識別しない個別にされます。 FaceIds の有効な番号が [1, 10]。'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: 省略可能なパラメーター
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      1 対多の識別により、人物グループまたは大規模人物グループから、特定のクエリの人物の顔に最も近い一致を見つけます。
      <br/> FaceIds 配列内の顔ごとに、顔識別、顔と (personGroupId で指定された) ユーザー グループに含まれるすべての面の類似点が計算されますか、または大きなユーザー (largePersonGroupId によって指定された)、グループ化しての順位付けが直面する候補人を返す類似性の信頼度。 ユーザーのグループ/大規模なユーザー グループを識別できるようにするトレーニングする必要があります。 詳細を見る[つの PersonGroup - トレーニング](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)と[LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)します。
      <br/>
      解説:<br />
      * アルゴリズムでは、同じの要求で個別に識別するのには、複数の顔は 10 個の顔を許可します。
      * ユーザーのグループ/大規模なユーザー グループの各メンバーは、1 つ以上の顔が 248 個の顔可能性があります。
      * 高い顔のイメージ品質は、精度の識別を意味します。 高品質な顔を検討してください: 正面、clear、および顔のサイズは 200 (目の間に 100 ピクセル単位) が 200 ピクセル x、または大きくします。
      * 返される候補の数は、maxNumOfCandidatesReturned と confidenceThreshold によって制限されます。 ユーザーが指定されていない場合、返される候補は空の配列になります。
      * お試しください[Face - 類似](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)人物グループ/大規模なユーザー グループの代わりに顔リスト/大規模な顔リストからのような顔を検出する必要がある場合。
      * ターゲット ユーザー グループまたは大きなユーザー グループによって使用される 'recognitionModel' と同じ 'recognitionModel' クエリ面の faceIds に関連付けられている必要があります。
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'クエリの配列に直面して顔によって作成された faceIds - を検出します。 面の各識別しない個別にされます。 FaceIds の有効な番号が [1, 10]。'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'クエリの配列に直面して顔によって作成された faceIds - を検出します。 面の各識別しない個別にされます。 FaceIds の有効な番号が [1, 10]。'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      2 つの顔が同一人物に属しているか 1 つの顔が 1 人の人物に属しているかを確認します。
      <br/>
      解説:<br />
      * 高い顔のイメージ品質は、精度の識別を意味します。 高品質な顔を検討してください: 正面、clear、および顔のサイズは 200 (目の間に 100 ピクセル単位) が 200 ピクセル x、または大きくします。
      * 機密性の高い精度であるシナリオの独自判断してください。
      * 関連付けられたクエリ面の faceIds 'recognitionModel'、ターゲットの正面、人物グループまたは大きなユーザー グループで使用される 'recognitionModel' と同じことがあります。
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 最初の面の faceId 顔に由来 - 検出
        - id: faceId2
          type:
            - string
          description: 2 番目の顔の faceId 顔に由来 - 検出
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 最初の面の faceId 顔に由来 - 検出
        - id: faceId2
          type:
            - string
          description: 2 番目の顔の faceId 顔に由来 - 検出
        - id: options
          type:
            - RequestOptionsBase
          description: 省略可能なパラメーター
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 最初の面の faceId 顔に由来 - 検出
        - id: faceId2
          type:
            - string
          description: 2 番目の顔の faceId 顔に由来 - 検出
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 顔に由来、顔の FaceId - 検出
        - id: personId
          type:
            - string
          description: ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。 personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: 省略可能なパラメーター
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 2 つの顔が同一人物に属しているかどうかを確認します。 Face Id とユーザー Id を比較します。
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 顔に由来、顔の FaceId - 検出
        - id: personId
          type:
            - string
          description: ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。 personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 顔に由来、顔の FaceId - 検出
        - id: personId
          type:
            - string
          description: ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。 personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
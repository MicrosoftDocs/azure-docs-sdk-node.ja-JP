### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: <span data-ttu-id="45270-101">顔を表すクラスです。</span><span class="sxs-lookup"><span data-stu-id="45270-101">Class representing a Face.</span></span>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="45270-102">イメージ ストリーム。</span><span class="sxs-lookup"><span data-stu-id="45270-102">An image stream.</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: <span data-ttu-id="45270-103">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-103">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="45270-104">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-104">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="45270-105">イメージと返します顔などの場所には、必要に応じて faceIds、ランドマーク、および属性を使用して、人間の顔を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>'
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="45270-106">イメージ ストリーム。</span><span class="sxs-lookup"><span data-stu-id="45270-106">An image stream.</span></span>
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: <span data-ttu-id="45270-107">イメージ ストリーム。</span><span class="sxs-lookup"><span data-stu-id="45270-107">An image stream.</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="45270-108">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-108">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="45270-109">イメージの URL をパブリックに到達可能</span><span class="sxs-lookup"><span data-stu-id="45270-109">Publicly reachable URL of an image</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: <span data-ttu-id="45270-110">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-110">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="45270-111">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-111">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="45270-112">画像内の人間の顔を検出して、顔を示す四角形を返します。必要に応じて、FaceId、ランドマーク、および属性も返します。</span><span class="sxs-lookup"><span data-stu-id="45270-112">Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.</span></span><br />
      * <span data-ttu-id="45270-113">FaceId、ランドマーク、および属性を含む省略可能なパラメーター。</span><span class="sxs-lookup"><span data-stu-id="45270-113">Optional parameters including faceId, landmarks, and attributes.</span></span> <span data-ttu-id="45270-114">属性には、年齢、性別、headPose、気に入った機能、facialHair、眼鏡、emotion、髪、構成、オクルー ジョン、[アクセサリ]、ぼかし、露出とノイズが含まれます。</span><span class="sxs-lookup"><span data-stu-id="45270-114">Attributes include age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.</span></span>
      * <span data-ttu-id="45270-115">実際の画像ではなく、抽出された顔機能は、サーバーに格納されます。</span><span class="sxs-lookup"><span data-stu-id="45270-115">The extracted face feature, instead of the actual image, will be stored on server.</span></span> <span data-ttu-id="45270-116">FaceId face 機能の識別子し、で使用される[直面 - 識別](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239)、[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)、および [顔</span><span class="sxs-lookup"><span data-stu-id="45270-116">The faceId is an identifier of the face feature and will be used in [Face - Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a), and [Face</span></span>
      - <span data-ttu-id="45270-117">Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) を検索します。</span><span class="sxs-lookup"><span data-stu-id="45270-117">Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).</span></span> <span data-ttu-id="45270-118">検出の呼び出しの後 24 時間に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="45270-118">It will expire 24 hours after the detection call.</span></span>
      * <span data-ttu-id="45270-119">高い顔のイメージ品質は、優れた検出および認識の精度を意味します。</span><span class="sxs-lookup"><span data-stu-id="45270-119">Higher face image quality means better detection and recognition precision.</span></span> <span data-ttu-id="45270-120">高品質な顔を検討してください: 正面、clear、および顔のサイズは 200 (目の間に 100 ピクセル単位) が 200 ピクセル x、または大きくします。</span><span class="sxs-lookup"><span data-stu-id="45270-120">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="45270-121">JPEG、PNG、GIF (最初のフレーム) および BMP 形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="45270-121">JPEG, PNG, GIF (the first frame), and BMP format are supported.</span></span> <span data-ttu-id="45270-122">許可されているイメージ ファイルのサイズは、1 KB から 6 MB です。</span><span class="sxs-lookup"><span data-stu-id="45270-122">The allowed image file size is from 1KB to 6MB.</span></span>
      * <span data-ttu-id="45270-123">そのサイズは 36 x 36 に 4096 x 4096 ピクセル顔は検出可能です。</span><span class="sxs-lookup"><span data-stu-id="45270-123">Faces are detectable when its size is 36x36 to 4096x4096 pixels.</span></span> <span data-ttu-id="45270-124">場合、ください入力画像を拡大しようと非常に小さくてもクリアの顔を検出する必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-124">If need to detect very small but clear faces, please try to enlarge the input image.</span></span>
      * <span data-ttu-id="45270-125">イメージの最大 64 の面を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="45270-125">Up to 64 faces can be returned for an image.</span></span> <span data-ttu-id="45270-126">小から大規模な顔四角形のサイズによっては、顔が順位付け。</span><span class="sxs-lookup"><span data-stu-id="45270-126">Faces are ranked by face rectangle size from large to small.</span></span>
      * <span data-ttu-id="45270-127">Face detector の正面と近い正面の顔を好みます。</span><span class="sxs-lookup"><span data-stu-id="45270-127">Face detector prefer frontal and near-frontal faces.</span></span> <span data-ttu-id="45270-128">顔など非常に大規模な検出された顔を角度 (頭部姿勢) またはオクルー ジョンされている、または正しくないイメージの向きならない場合があります。</span><span class="sxs-lookup"><span data-stu-id="45270-128">There are cases that faces may not be detected, e.g. exceptionally large face angles (head-pose) or being occluded, or wrong image orientation.</span></span>
      * <span data-ttu-id="45270-129">属性 (年齢、性別、headPose、気に入った機能、facialHair、眼鏡、emotion、髪、構成、オクルー ジョン、[アクセサリ]、ぼかし、露出とノイズ) を完全に正確なことができない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="45270-129">Attributes (age, gender, headPose, smile, facialHair, glasses, emotion, hair, makeup, occlusion, accessories, blur, exposure and noise) may not be perfectly accurate.</span></span> <span data-ttu-id="45270-130">HeadPose のピッチの値は、予約済みのフィールドでは常に 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="45270-130">HeadPose's pitch value is a reserved field and will always return 0.</span></span>
      * <span data-ttu-id="45270-131">異なる 'recognitionModel' 値が提供されます。</span><span class="sxs-lookup"><span data-stu-id="45270-131">Different 'recognitionModel' values are provided.</span></span> <span data-ttu-id="45270-132">フォロー アップ操作などの確認、識別する場合と同様の検索が必要な 'recognitionModel' パラメーターを使用して認識モデルを指定してください。</span><span class="sxs-lookup"><span data-stu-id="45270-132">If follow-up operations like Verify, Identify, Find Similar are needed, please specify the recognition model with 'recognitionModel' parameter.</span></span> <span data-ttu-id="45270-133">'RecognitionModel' の既定値は 'recognition_01' が場合、このパラメーターにする必要があるモデルが最新モデルに明示的に指定されることが必要なしてください。</span><span class="sxs-lookup"><span data-stu-id="45270-133">The default value for 'recognitionModel' is 'recognition_01', if latest model needed, please explicitly specify the model you need in this parameter.</span></span> <span data-ttu-id="45270-134">指定されると、検出された faceIds は指定された認識モデルに関連付けられてなります。</span><span class="sxs-lookup"><span data-stu-id="45270-134">Once specified, the detected faceIds will be associated with the specified recognition model.</span></span> <span data-ttu-id="45270-135">詳細についてを参照してください[認識モデルを指定する方法](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)</span><span class="sxs-lookup"><span data-stu-id="45270-135">More details, please refer to [How to specify a recognition model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)</span></span>
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="45270-136">イメージの URL をパブリックに到達可能</span><span class="sxs-lookup"><span data-stu-id="45270-136">Publicly reachable URL of an image</span></span>
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: <span data-ttu-id="45270-137">イメージの URL をパブリックに到達可能</span><span class="sxs-lookup"><span data-stu-id="45270-137">Publicly reachable URL of an image</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            <span data-ttu-id="45270-138">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-138">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="45270-139">面を作成します。</span><span class="sxs-lookup"><span data-stu-id="45270-139">Create a Face.</span></span>
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            <span data-ttu-id="45270-140">サービス クライアントへの参照。</span><span class="sxs-lookup"><span data-stu-id="45270-140">Reference to the service client.</span></span>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: <span data-ttu-id="45270-141">クエリの表面の FaceId します。</span><span class="sxs-lookup"><span data-stu-id="45270-141">FaceId of the query face.</span></span> <span data-ttu-id="45270-142">ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-142">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="45270-143">この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="45270-143">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: <span data-ttu-id="45270-144">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-144">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            <span data-ttu-id="45270-145">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-145">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="45270-146">与えられたクエリの顔の faceId に対して、faceId 配列、顔リスト、または大規模顔リストから類似の顔を検索します。</span><span class="sxs-lookup"><span data-stu-id="45270-146">Given query face's faceId, to search the similar-looking faces from a faceId array, a face list or a large face list.</span></span> <span data-ttu-id="45270-147">faceId 配列には、によって作成された顔が含まれています。[直面 - 検出](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)、が 24 時間の作成後に期限が切れます。</span><span class="sxs-lookup"><span data-stu-id="45270-147">faceId array contains the faces created by [Face - Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), which will expire 24 hours after creation.</span></span> <span data-ttu-id="45270-148">"FaceListId"がによって作成された[FaceList - 作成](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)は期限切れ persistedFaceIds を格納しています。</span><span class="sxs-lookup"><span data-stu-id="45270-148">A "faceListId" is created by [FaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) containing persistedFaceIds that will not expire.</span></span> <span data-ttu-id="45270-149">"LargeFaceListId"がによって作成されたと[LargeFaceList - 作成](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)も期限切れ persistedFaceIds を格納しています。</span><span class="sxs-lookup"><span data-stu-id="45270-149">And a "largeFaceListId" is created by [LargeFaceList - Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) containing persistedFaceIds that will also not expire.</span></span> <span data-ttu-id="45270-150">入力によって返されるような顔リストには、faceIds または類似性によってランク付けされた persistedFaceIds が含まれています。</span><span class="sxs-lookup"><span data-stu-id="45270-150">Depending on the input the returned similar faces list contains faceIds or persistedFaceIds ranked by similarity.</span></span>
      <br/><span data-ttu-id="45270-151">同様の検索には、2 つの作業モード、"matchPerson"と"matchFace"があります。</span><span class="sxs-lookup"><span data-stu-id="45270-151">Find similar has two working modes, "matchPerson" and "matchFace".</span></span> <span data-ttu-id="45270-152">"matchPerson"は、同一人物の内部しきい値を使用して、可能な限り同じ人の顔を検出しようとする既定モードです。</span><span class="sxs-lookup"><span data-stu-id="45270-152">"matchPerson" is the default mode that it tries to find faces of the same person as possible by using internal same-person thresholds.</span></span> <span data-ttu-id="45270-153">既知の人の他の写真を検索すると便利です。</span><span class="sxs-lookup"><span data-stu-id="45270-153">It is useful to find a known person's other photos.</span></span> <span data-ttu-id="45270-154">顔が内部しきい値を渡されない場合、空のリストが返されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="45270-154">Note that an empty list will be returned if no faces pass the internal thresholds.</span></span> <span data-ttu-id="45270-155">同一人物のしきい値およびとにかくと似た顔をランク付けを返します。"matchFace"モードは無視されますも類似性が低い。</span><span class="sxs-lookup"><span data-stu-id="45270-155">"matchFace" mode ignores same-person thresholds and returns ranked similar faces anyway, even the similarity is low.</span></span> <span data-ttu-id="45270-156">これは、有名人風の顔を検索するようなケースで使用できます。</span><span class="sxs-lookup"><span data-stu-id="45270-156">It can be used in the cases like searching celebrity-looking faces.</span></span>
      <br/><span data-ttu-id="45270-157">関連付けられたクエリ面の faceId 'recognitionModel' ターゲット faceId 配列や顔リスト、大規模な顔リストで使用される 'recognitionModel' と同じことがあります。</span><span class="sxs-lookup"><span data-stu-id="45270-157">The 'recognitionModel' associated with the query face's faceId should be the same as the 'recognitionModel' used by the target faceId array, face list or large face list.</span></span>
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: <span data-ttu-id="45270-158">クエリの表面の FaceId します。</span><span class="sxs-lookup"><span data-stu-id="45270-158">FaceId of the query face.</span></span> <span data-ttu-id="45270-159">ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-159">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="45270-160">この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="45270-160">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: <span data-ttu-id="45270-161">クエリの表面の FaceId します。</span><span class="sxs-lookup"><span data-stu-id="45270-161">FaceId of the query face.</span></span> <span data-ttu-id="45270-162">ユーザーは、顔を呼び出す - 有効な faceId を取得するには、1 つ目を検出する必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-162">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="45270-163">この faceId が永続化されていないと、検出の呼び出しの後 24 時間の有効期限が切れることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="45270-163">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            <span data-ttu-id="45270-164">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-164">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="45270-165">顔の類似性に基づいて候補の顔をグループ分けします。</span><span class="sxs-lookup"><span data-stu-id="45270-165">Divide candidate faces into groups based on face similarity.</span></span><br />
      * <span data-ttu-id="45270-166">出力は、1 つまたは複数の不整合な顔のグループと、messyGroup です。</span><span class="sxs-lookup"><span data-stu-id="45270-166">The output is one or more disjointed face groups and a messyGroup.</span></span> <span data-ttu-id="45270-167">顔のグループを持つような検索、多くの場合、同一人物の顔が含まれています。</span><span class="sxs-lookup"><span data-stu-id="45270-167">A face group contains faces that have similar looking, often of the same person.</span></span> <span data-ttu-id="45270-168">顔のグループはグループのサイズ、顔の数などによって順位付けされます。</span><span class="sxs-lookup"><span data-stu-id="45270-168">Face groups are ranked by group size, i.e. number of faces.</span></span> <span data-ttu-id="45270-169">顔が同一人物に属しているが、結果のいくつかのグループに分割される場合があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="45270-169">Notice that faces belonging to a same person might be split into several groups in the result.</span></span>
      * <span data-ttu-id="45270-170">MessyGroup は、特別な顔を元の面からのような対応面が見つからないことを示す面を含むグループです。</span><span class="sxs-lookup"><span data-stu-id="45270-170">MessyGroup is a special face group containing faces that cannot find any similar counterpart face from original faces.</span></span> <span data-ttu-id="45270-171">MessyGroup は、すべての顔検出、対応する場合、結果は表示されません。</span><span class="sxs-lookup"><span data-stu-id="45270-171">The messyGroup will not appear in the result if all faces found their counterparts.</span></span>
      * <span data-ttu-id="45270-172">グループの API には最大で少なくとも 2 つの候補の面から 1000 が必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-172">Group API needs at least 2 candidate faces and 1000 at most.</span></span> <span data-ttu-id="45270-173">お勧め[直面 - 確認](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)である場合に 2 つの候補の面です。</span><span class="sxs-lookup"><span data-stu-id="45270-173">We suggest to try [Face - Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) when you only have 2 candidate faces.</span></span>
      * <span data-ttu-id="45270-174">関連付けられたクエリ面の faceIds 'recognitionModel' は同じである必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-174">The 'recognitionModel' associated with the query faces' faceIds should be the same.</span></span>
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="45270-175">候補 faceId の配列を作成して顔 - を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-175">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="45270-176">最大値は、顔 1000 個です。</span><span class="sxs-lookup"><span data-stu-id="45270-176">The maximum is 1000 faces</span></span>
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="45270-177">候補 faceId の配列を作成して顔 - を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-177">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="45270-178">最大値は、顔 1000 個です。</span><span class="sxs-lookup"><span data-stu-id="45270-178">The maximum is 1000 faces</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="45270-179">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-179">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            <span data-ttu-id="45270-180">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-180">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: <span data-ttu-id="45270-181">候補 faceId の配列を作成して顔 - を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-181">Array of candidate faceId created by Face - Detect.</span></span> <span data-ttu-id="45270-182">最大値は、顔 1000 個です。</span><span class="sxs-lookup"><span data-stu-id="45270-182">The maximum is 1000 faces</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            <span data-ttu-id="45270-183">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-183">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="45270-184">クエリの配列に直面して顔によって作成された faceIds - を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-184">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="45270-185">面の各識別しない個別にされます。</span><span class="sxs-lookup"><span data-stu-id="45270-185">Each of the faces are identified independently.</span></span> <span data-ttu-id="45270-186">FaceIds の有効な番号が [1, 10]。</span><span class="sxs-lookup"><span data-stu-id="45270-186">The valid number of faceIds is between [1, 10].</span></span>'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: <span data-ttu-id="45270-187">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-187">The optional parameters</span></span>
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            <span data-ttu-id="45270-188">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-188">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="45270-189">1 対多の識別により、人物グループまたは大規模人物グループから、特定のクエリの人物の顔に最も近い一致を見つけます。</span><span class="sxs-lookup"><span data-stu-id="45270-189">1-to-many identification to find the closest matches of the specific query person face from a person group or large person group.</span></span>
      <br/> <span data-ttu-id="45270-190">FaceIds 配列内の顔ごとに、顔識別、顔と (personGroupId で指定された) ユーザー グループに含まれるすべての面の類似点が計算されますか、または大きなユーザー (largePersonGroupId によって指定された)、グループ化しての順位付けが直面する候補人を返す類似性の信頼度。</span><span class="sxs-lookup"><span data-stu-id="45270-190">For each face in the faceIds array, Face Identify will compute similarities between the query face and all the faces in the person group (given by personGroupId) or large person group (given by largePersonGroupId), and return candidate person(s) for that face ranked by similarity confidence.</span></span> <span data-ttu-id="45270-191">ユーザーのグループ/大規模なユーザー グループを識別できるようにするトレーニングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-191">The person group/large person group should be trained to make it ready for identification.</span></span> <span data-ttu-id="45270-192">詳細を見る[つの PersonGroup - トレーニング](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)と[LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)します。</span><span class="sxs-lookup"><span data-stu-id="45270-192">See more in [PersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) and [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).</span></span>
      <br/>
      <span data-ttu-id="45270-193">解説:</span><span class="sxs-lookup"><span data-stu-id="45270-193">Remarks:</span></span><br />
      * <span data-ttu-id="45270-194">アルゴリズムでは、同じの要求で個別に識別するのには、複数の顔は 10 個の顔を許可します。</span><span class="sxs-lookup"><span data-stu-id="45270-194">The algorithm allows more than one face to be identified independently at the same request, but no more than 10 faces.</span></span>
      * <span data-ttu-id="45270-195">ユーザーのグループ/大規模なユーザー グループの各メンバーは、1 つ以上の顔が 248 個の顔可能性があります。</span><span class="sxs-lookup"><span data-stu-id="45270-195">Each person in the person group/large person group could have more than one face, but no more than 248 faces.</span></span>
      * <span data-ttu-id="45270-196">高い顔のイメージ品質は、精度の識別を意味します。</span><span class="sxs-lookup"><span data-stu-id="45270-196">Higher face image quality means better identification precision.</span></span> <span data-ttu-id="45270-197">高品質な顔を検討してください: 正面、clear、および顔のサイズは 200 (目の間に 100 ピクセル単位) が 200 ピクセル x、または大きくします。</span><span class="sxs-lookup"><span data-stu-id="45270-197">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="45270-198">返される候補の数は、maxNumOfCandidatesReturned と confidenceThreshold によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="45270-198">Number of candidates returned is restricted by maxNumOfCandidatesReturned and confidenceThreshold.</span></span> <span data-ttu-id="45270-199">ユーザーが指定されていない場合、返される候補は空の配列になります。</span><span class="sxs-lookup"><span data-stu-id="45270-199">If no person is identified, the returned candidates will be an empty array.</span></span>
      * <span data-ttu-id="45270-200">お試しください[Face - 類似](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)人物グループ/大規模なユーザー グループの代わりに顔リスト/大規模な顔リストからのような顔を検出する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="45270-200">Try [Face - Find Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) when you need to find similar faces from a face list/large face list instead of a person group/large person group.</span></span>
      * <span data-ttu-id="45270-201">ターゲット ユーザー グループまたは大きなユーザー グループによって使用される 'recognitionModel' と同じ 'recognitionModel' クエリ面の faceIds に関連付けられている必要があります。</span><span class="sxs-lookup"><span data-stu-id="45270-201">The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target person group or large person group.</span></span>
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="45270-202">クエリの配列に直面して顔によって作成された faceIds - を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-202">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="45270-203">面の各識別しない個別にされます。</span><span class="sxs-lookup"><span data-stu-id="45270-203">Each of the faces are identified independently.</span></span> <span data-ttu-id="45270-204">FaceIds の有効な番号が [1, 10]。</span><span class="sxs-lookup"><span data-stu-id="45270-204">The valid number of faceIds is between [1, 10].</span></span>'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: '<span data-ttu-id="45270-205">クエリの配列に直面して顔によって作成された faceIds - を検出します。</span><span class="sxs-lookup"><span data-stu-id="45270-205">Array of query faces faceIds, created by the Face - Detect.</span></span> <span data-ttu-id="45270-206">面の各識別しない個別にされます。</span><span class="sxs-lookup"><span data-stu-id="45270-206">Each of the faces are identified independently.</span></span> <span data-ttu-id="45270-207">FaceIds の有効な番号が [1, 10]。</span><span class="sxs-lookup"><span data-stu-id="45270-207">The valid number of faceIds is between [1, 10].</span></span>'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            <span data-ttu-id="45270-208">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-208">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="45270-209">2 つの顔が同一人物に属しているか 1 つの顔が 1 人の人物に属しているかを確認します。</span><span class="sxs-lookup"><span data-stu-id="45270-209">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
      <br/>
      <span data-ttu-id="45270-210">解説:</span><span class="sxs-lookup"><span data-stu-id="45270-210">Remarks:</span></span><br />
      * <span data-ttu-id="45270-211">高い顔のイメージ品質は、精度の識別を意味します。</span><span class="sxs-lookup"><span data-stu-id="45270-211">Higher face image quality means better identification precision.</span></span> <span data-ttu-id="45270-212">高品質な顔を検討してください: 正面、clear、および顔のサイズは 200 (目の間に 100 ピクセル単位) が 200 ピクセル x、または大きくします。</span><span class="sxs-lookup"><span data-stu-id="45270-212">Please consider high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.</span></span>
      * <span data-ttu-id="45270-213">機密性の高い精度であるシナリオの独自判断してください。</span><span class="sxs-lookup"><span data-stu-id="45270-213">For the scenarios that are sensitive to accuracy please make your own judgment.</span></span>
      * <span data-ttu-id="45270-214">関連付けられたクエリ面の faceIds 'recognitionModel'、ターゲットの正面、人物グループまたは大きなユーザー グループで使用される 'recognitionModel' と同じことがあります。</span><span class="sxs-lookup"><span data-stu-id="45270-214">The 'recognitionModel' associated with the query faces' faceIds should be the same as the 'recognitionModel' used by the target face, person group or large person group.</span></span>
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="45270-215">最初の面の faceId 顔に由来 - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-215">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="45270-216">2 番目の顔の faceId 顔に由来 - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-216">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="45270-217">最初の面の faceId 顔に由来 - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-217">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="45270-218">2 番目の顔の faceId 顔に由来 - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-218">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="45270-219">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-219">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="45270-220">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-220">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: '<span data-ttu-id="45270-221">最初の面の faceId 顔に由来 - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-221">FaceId of the first face, comes from Face - Detect</span></span>'
        - id: faceId2
          type:
            - string
          description: '<span data-ttu-id="45270-222">2 番目の顔の faceId 顔に由来 - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-222">FaceId of the second face, comes from Face - Detect</span></span>'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="45270-223">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-223">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="45270-224">顔に由来、顔の FaceId - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-224">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="45270-225">ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。</span><span class="sxs-lookup"><span data-stu-id="45270-225">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="45270-226">personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。</span><span class="sxs-lookup"><span data-stu-id="45270-226">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: <span data-ttu-id="45270-227">省略可能なパラメーター</span><span class="sxs-lookup"><span data-stu-id="45270-227">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="45270-228">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-228">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="45270-229">2 つの顔が同一人物に属しているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="45270-229">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="45270-230">Face Id とユーザー Id を比較します。</span><span class="sxs-lookup"><span data-stu-id="45270-230">Compares a face Id with a Person Id</span></span>
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="45270-231">顔に由来、顔の FaceId - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-231">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="45270-232">ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。</span><span class="sxs-lookup"><span data-stu-id="45270-232">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="45270-233">personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。</span><span class="sxs-lookup"><span data-stu-id="45270-233">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: '<span data-ttu-id="45270-234">顔に由来、顔の FaceId - 検出</span><span class="sxs-lookup"><span data-stu-id="45270-234">FaceId of the face, comes from Face - Detect</span></span>'
        - id: personId
          type:
            - string
          description: <span data-ttu-id="45270-235">ユーザー グループ、または大きなユーザー グループでは、特定のユーザーを指定します。</span><span class="sxs-lookup"><span data-stu-id="45270-235">Specify a certain person in a person group or a large person group.</span></span> <span data-ttu-id="45270-236">personId つの PersonGroup 人が作成 - 作成するか LargePersonGroup 人を作成します。</span><span class="sxs-lookup"><span data-stu-id="45270-236">personId is created in PersonGroup Person - Create or LargePersonGroup Person - Create.</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            <span data-ttu-id="45270-237">コールバック</span><span class="sxs-lookup"><span data-stu-id="45270-237">The callback</span></span>
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
### YamlMime:UniversalReference
ms.openlocfilehash: 4ae6f55ce908dd8b74a39abdec8f6936dcb4ced1
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 12/13/2018
ms.locfileid: "52029486"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.client'
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.query_1'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: 新しいデータベースの作成と、すべてのデータベースの読み取り/クエリ操作
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.client'
  name: client
  fullName: client
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'client: CosmosClient'
    return:
      type:
      - '@azure/cosmos.CosmosClient'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create(DatabaseDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    データベースを作成するための要求を送信します。

    データベースは、ユーザー、アクセス許可、およびコンテナーのセットを管理します。

    各 Azure Cosmos DB データベース アカウントは、複数の独立した名前付きデータの論理コンテナーになっているデータベースでのデータベースをサポートできます。


    各データベースは、さらに 1 つまたは複数のドキュメントを含むそれぞれが 1 つまたは複数のコンテナーで構成されます。 データベースは、管理用のリソースであるため、サービス マスター _ キーがアクセスして、ユーザーの Api を使用して、操作を正常に完了するために必要になります。
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <xref:DatabaseDefinition>を表す、<xref:Database>を作成します。
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        応答のページ サイズ、継続トークンなどのオプションの設定を使用します。
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists(DatabaseDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    それが作成しない場合、データベースが存在する場合とを確認します。

    これにより、読み取り操作の id に基づいて、 `body`、それが見つからない場合、作成操作。

    データベースは、ユーザー、アクセス許可、およびコンテナーのセットを管理します。

    各 Azure Cosmos DB データベース アカウントは、複数の独立した名前付きデータの論理コンテナーになっているデータベースでのデータベースをサポートできます。


    各データベースは、さらに 1 つまたは複数のドキュメントを含むそれぞれが 1 つまたは複数のコンテナーで構成されます。 データベースがあるため、リソースを管理、サービス マスター _ キーがアクセスして、ユーザーの Api を使用して、操作を正常に完了するために必要になります。
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: <xref:DatabaseDefinition>を表す、<xref:Database>を作成します。
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query(string | SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: すべてのデータベースを照会します。
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: 操作のクエリの構成。 参照してください<xref:SqlQuerySpec>クエリを構成する方法の詳細についてはします。
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: 応答のページ サイズ、継続トークンなどのオプションの設定を使用します。
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<any>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query_1'
  name: query(string | SqlQuerySpec, FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: すべてのデータベースを照会します。
  syntax:
    content: 'function query<T>(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: 操作のクエリの構成。 参照してください<xref:SqlQuerySpec>クエリを構成する方法の詳細についてはします。
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: 応答のページ サイズ、継続トークンなどのオプションの設定を使用します。
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<T>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: すべてのデータベースを読み取ります。
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: 応答のページ サイズ、継続トークンなどのオプションの設定を使用します。
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition & @azure/cosmos.Resource>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  name: CosmosClient
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  name: DatabaseDefinition
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  name: DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  name: SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<any>'
  name: QueryIterator<any>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <any>
    fullName: <any>
- uid: '@azure/cosmos.QueryIterator<T>'
  name: QueryIterator<T>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <T>
    fullName: <T>
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition & @azure/cosmos.Resource>'
  name: Resource>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: " & "
    fullName: " & "
  - name: Resource
    fullName: Resource
    uid: '@azure/cosmos.Resource'
  - name: '>'
    fullName: '>'

### YamlMime:UniversalReference
ms.openlocfilehash: f73f8bdaf3abcd157ae343f75cbec57993e54762
ms.sourcegitcommit: ce76ec3eda83746ef9a765165173b5c00b5b7df6
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 12/20/2018
ms.locfileid: "53664766"
items:
- uid: '@azure/cosmos.Container'
  name: Container
  fullName: Container
  children:
  - '@azure/cosmos.Container.conflict'
  - '@azure/cosmos.Container.conflicts'
  - '@azure/cosmos.Container.database'
  - '@azure/cosmos.Container.delete'
  - '@azure/cosmos.Container.extractPartitionKey'
  - '@azure/cosmos.Container.id'
  - '@azure/cosmos.Container.item'
  - '@azure/cosmos.Container.items'
  - '@azure/cosmos.Container.read'
  - '@azure/cosmos.Container.readPartitionKeyRanges'
  - '@azure/cosmos.Container.replace'
  - '@azure/cosmos.Container.storedProcedure'
  - '@azure/cosmos.Container.storedProcedures'
  - '@azure/cosmos.Container.trigger'
  - '@azure/cosmos.Container.triggers'
  - '@azure/cosmos.Container.url'
  - '@azure/cosmos.Container.userDefinedFunction'
  - '@azure/cosmos.Container.userDefinedFunctions'
  langs:
  - typeScript
  type: class
  summary: 読み取り、置換、または id で、特定の既存のコンテナーを削除するための操作。
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.conflict'
  name: conflict(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: 読み取り、置換、または、特定の削除に使用される既存<xref:Conflict>id。使用`.conflicts`、新しい競合を作成またはすべての競合のクエリ/読み取り。
  syntax:
    content: 'function conflict(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id、<xref:Conflict>します。
    return:
      type:
      - '@azure/cosmos.Conflict'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.conflicts'
  name: conflicts
  fullName: conflicts
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'conflicts: Conflicts'
    return:
      type:
      - '@azure/cosmos.Conflicts'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.delete'
  name: delete(RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: コンテナーを削除する
  syntax:
    content: 'function delete(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.extractPartitionKey'
  name: extractPartitionKey(any, PartitionKeyDefinition)
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'function extractPartitionKey(document: any, partitionKeyDefinition: PartitionKeyDefinition)'
    parameters:
    - id: document
      type:
      - any
      description: ''
    - id: partitionKeyDefinition
      type:
      - '@azure/cosmos.PartitionKeyDefinition'
      description: ''
    return:
      type:
      - '@azure/cosmos.PartitionKey[]'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.id'
  name: id
  fullName: id
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'id: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.item'
  name: item(string, string)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    読み取り、置換、または、特定の削除に使用される既存<xref:Item>id。使用`.items`項目の新規作成またはすべての項目のクエリ/読み取り。
  syntax:
    content: 'function item(id: string, partitionKey?: string)'
    parameters:
    - id: id
      type:
      - string
      description: Id、<xref:Item>します。
    - id: partitionKey
      type:
      - string
      description: パーティション キー、<xref:Item>します。 (パーティション分割コンテナーの必須)。
      optional: true
    return:
      type:
      - '@azure/cosmos.Item'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.items'
  name: items
  fullName: items
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    新しい項目を作成および読み取り、置換、または既存のアイテムの削除のすべての項目の読み取り/クエリ操作を使用して、`.item(id)`します。
  syntax:
    content: 'items: Items'
    return:
      type:
      - '@azure/cosmos.Items'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.read'
  name: read(RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: コンテナーの定義を読み取り
  syntax:
    content: 'function read(options?: RequestOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.readPartitionKeyRanges'
  name: readPartitionKeyRanges(FeedOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'function readPartitionKeyRanges(feedOptions?: FeedOptions)'
    parameters:
    - id: feedOptions
      type:
      - '@azure/cosmos.FeedOptions'
      description: ''
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.PartitionKeyRange>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.replace'
  name: replace(ContainerDefinition, RequestOptions)
  children: []
  type: method
  langs:
  - typeScript
  summary: コンテナーの定義に置き換えます
  syntax:
    content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: ''
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: ''
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedure'
  name: storedProcedure(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: 読み取り、置換、または、特定の削除に使用される既存<xref:StoredProcedure>id。使用`.storedProcedures`新しいのストアド プロシージャを作成またはすべてのストアド プロシージャのクエリ/読み取り。
  syntax:
    content: 'function storedProcedure(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id、<xref:StoredProcedure>します。
    return:
      type:
      - '@azure/cosmos.StoredProcedure'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.storedProcedures'
  name: storedProcedures
  fullName: storedProcedures
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    新しいのストアド プロシージャを作成およびすべてのストアド プロシージャの読み取り/クエリ操作です。

    読み取り、置換、または既存のストアド プロシージャを削除するを使用して`.storedProcedure(id)`します。
  syntax:
    content: 'storedProcedures: StoredProcedures'
    return:
      type:
      - '@azure/cosmos.StoredProcedures'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.trigger'
  name: trigger(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: 読み取り、置換、または、特定の削除に使用される既存<xref:Trigger>id。使用`.triggers`の新しいトリガーを作成またはすべてのトリガーのクエリ/読み取り。
  syntax:
    content: 'function trigger(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id、<xref:Trigger>します。
    return:
      type:
      - '@azure/cosmos.Trigger'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.triggers'
  name: triggers
  fullName: triggers
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    新しいトリガーを作成およびすべてのトリガーの読み取り/クエリ操作です。

    読み取り、置換、または既存のトリガーを削除するを使用して`.trigger(id)`します。
  syntax:
    content: 'triggers: Triggers'
    return:
      type:
      - '@azure/cosmos.Triggers'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.url'
  name: url
  fullName: url
  children: []
  langs:
  - typeScript
  type: property
  summary: リソースへの参照の URL を返します。 アクセス許可でリンクする場合に使用されます。
  syntax:
    content: 'url: string'
    return:
      type:
      - string
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunction'
  name: userDefinedFunction(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: 読み取り、置換、または、特定の削除に使用される既存<xref:UserDefinedFunction>id。使用`.userDefinedFunctions`作成の新しいユーザー定義関数、またはすべてのユーザー定義関数のクエリ/読み取り。
  syntax:
    content: 'function userDefinedFunction(id: string)'
    parameters:
    - id: id
      type:
      - string
      description: >
        Id、<xref:UserDefinedFunction>します。
    return:
      type:
      - '@azure/cosmos.UserDefinedFunction'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Container.userDefinedFunctions'
  name: userDefinedFunctions
  fullName: userDefinedFunctions
  children: []
  langs:
  - typeScript
  type: property
  summary: >
    新しいユーザーを作成するための操作には、関数が定義されているし、読み取り/クエリを実行するすべてのユーザー定義関数。

    読み取り、置換、または既存のユーザー定義関数を削除するを使用して`.userDefinedFunction(id)`します。
  syntax:
    content: 'userDefinedFunctions: UserDefinedFunctions'
    return:
      type:
      - '@azure/cosmos.UserDefinedFunctions'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Conflicts'
  name: Conflicts
  spec.typeScript:
  - name: Conflicts
    fullName: Conflicts
    uid: '@azure/cosmos.Conflicts'
- uid: '@azure/cosmos.Database'
  name: Database
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.Items'
  name: Items
  spec.typeScript:
  - name: Items
    fullName: Items
    uid: '@azure/cosmos.Items'
- uid: '@azure/cosmos.StoredProcedures'
  name: StoredProcedures
  spec.typeScript:
  - name: StoredProcedures
    fullName: StoredProcedures
    uid: '@azure/cosmos.StoredProcedures'
- uid: '@azure/cosmos.Triggers'
  name: Triggers
  spec.typeScript:
  - name: Triggers
    fullName: Triggers
    uid: '@azure/cosmos.Triggers'
- uid: '@azure/cosmos.UserDefinedFunctions'
  name: UserDefinedFunctions
  spec.typeScript:
  - name: UserDefinedFunctions
    fullName: UserDefinedFunctions
    uid: '@azure/cosmos.UserDefinedFunctions'
- uid: '@azure/cosmos.Conflict'
  name: Conflict
  spec.typeScript:
  - name: Conflict
    fullName: Conflict
    uid: '@azure/cosmos.Conflict'
- uid: '@azure/cosmos.RequestOptions'
  name: RequestOptions
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  name: ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.PartitionKeyDefinition'
  name: PartitionKeyDefinition
  spec.typeScript:
  - name: PartitionKeyDefinition
    fullName: PartitionKeyDefinition
    uid: '@azure/cosmos.PartitionKeyDefinition'
- uid: '@azure/cosmos.PartitionKey[]'
  name: PartitionKey[]
  spec.typeScript:
  - name: PartitionKey
    fullName: PartitionKey
    uid: '@azure/cosmos.PartitionKey'
  - name: '[]'
    fullName: '[]'
- uid: '@azure/cosmos.Item'
  name: Item
  spec.typeScript:
  - name: Item
    fullName: Item
    uid: '@azure/cosmos.Item'
- uid: '@azure/cosmos.FeedOptions'
  name: FeedOptions
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.PartitionKeyRange>'
  name: PartitionKeyRange>
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: PartitionKeyRange
    fullName: PartitionKeyRange
    uid: '@azure/cosmos.PartitionKeyRange'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.ContainerDefinition'
  name: ContainerDefinition
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.StoredProcedure'
  name: StoredProcedure
  spec.typeScript:
  - name: StoredProcedure
    fullName: StoredProcedure
    uid: '@azure/cosmos.StoredProcedure'
- uid: '@azure/cosmos.Trigger'
  name: Trigger
  spec.typeScript:
  - name: Trigger
    fullName: Trigger
    uid: '@azure/cosmos.Trigger'
- uid: '@azure/cosmos.UserDefinedFunction'
  name: UserDefinedFunction
  spec.typeScript:
  - name: UserDefinedFunction
    fullName: UserDefinedFunction
    uid: '@azure/cosmos.UserDefinedFunction'

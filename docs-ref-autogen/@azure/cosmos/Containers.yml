### YamlMime:UniversalReference
ms.openlocfilehash: 1aa6f8d573fc6248e534db33c9d88b9d44b294c6
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 08/22/2018
ms.locfileid: "41702351"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="e6b04-101">新しいコンテナーを作成して、すべてのコンテナーの読み取り/クエリ実行するための操作</span><span class="sxs-lookup"><span data-stu-id="e6b04-101">Operations for creating new containers, and reading/querying all containers</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="e6b04-102">コンテナーを作成します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-102">Creates a container.</span></span>

    <span data-ttu-id="e6b04-103">コンテナーとは、項目の名前付きの論理コンテナーです。</span><span class="sxs-lookup"><span data-stu-id="e6b04-103">A container is a named logical container for items.</span></span>


    <span data-ttu-id="e6b04-104">データベースは、0 個以上の名前付きコンテナーを含めることができ、各コンテナーは、0 個以上の JSON 項目から構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6b04-104">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="e6b04-105">スキーマ フリーである、同じ構造またはフィールドを共有するコンテナー内の項目は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="e6b04-105">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="e6b04-106">コンテナーは、アプリケーションのリソースであるため、行うことができます、マスター _ キーまたはリソース キーを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-106">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="e6b04-107">コンテナーの本体を表します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-107">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="e6b04-108">応答のページ サイズ、継続トークンなどのオプションの設定を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="e6b04-109">かどうか、コンテナーが存在し、していない場合は作成を確認します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-109">Checks if a Container exists, and, if it doesn't, creates it.</span></span>

    <span data-ttu-id="e6b04-110">これにより、読み取り操作の id に基づいて、 `body`、それが見つからない場合、作成操作。</span><span class="sxs-lookup"><span data-stu-id="e6b04-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="e6b04-111">出力が既定以外のプロパティ (つまりインデックス作成ポリシーなど) に渡される本文と一致していることを確認する必要があります。コンテナーとは、項目の名前付きの論理コンテナーです。</span><span class="sxs-lookup"><span data-stu-id="e6b04-111">You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.) A container is a named logical container for items.</span></span>


    <span data-ttu-id="e6b04-112">データベースは、0 個以上の名前付きコンテナーを含めることができ、各コンテナーは、0 個以上の JSON 項目から構成されます。</span><span class="sxs-lookup"><span data-stu-id="e6b04-112">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="e6b04-113">スキーマ フリーである、同じ構造またはフィールドを共有するコンテナー内の項目は必要ありません。</span><span class="sxs-lookup"><span data-stu-id="e6b04-113">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="e6b04-114">コンテナーは、アプリケーションのリソースであるため、行うことができます、マスター _ キーまたはリソース キーを使用します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-114">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="e6b04-115">コンテナーの本体を表します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-115">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="e6b04-116">応答のページ サイズ、継続トークンなどのオプションの設定を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-116">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e6b04-117">すべてのコンテナーを照会します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-117">Queries all containers.</span></span>
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="e6b04-118">操作のクエリの構成。</span><span class="sxs-lookup"><span data-stu-id="e6b04-118">Query configuration for the operation.</span></span> <span data-ttu-id="e6b04-119">参照してください<xref:SqlQuerySpec>クエリを構成する方法の詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="e6b04-119">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="e6b04-120">応答のページ サイズ、継続トークンなどのオプションの設定を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-120">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="e6b04-121">すべてのコンテナーを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="e6b04-121">Read all containers.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="e6b04-122">応答のページ サイズ、継続トークンなどのオプションの設定を使用します。</span><span class="sxs-lookup"><span data-stu-id="e6b04-122">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: '>'
    fullName: '>'

### YamlMime:UniversalReference
ms.openlocfilehash: ef0a15814adb8ac1c36af0e1f26ebfb7d4ea6fca
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 12/13/2018
ms.locfileid: "52062807"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="a5506-101">QueryIterator オブジェクトを implmenetation のトラバーサルと、Azure Cosmos DB データベース サービスの応答に対する繰り返し処理できるフィードまたはクエリの応答を表します。</span><span class="sxs-lookup"><span data-stu-id="a5506-101">Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service.</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="a5506-102">現在、QueryIterator 要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="a5506-102">Retrieve the current element on the QueryIterator.</span></span>
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="a5506-103">フィードの次のバッチを取得し、関数を配列として渡す</span><span class="sxs-lookup"><span data-stu-id="a5506-103">Retrieve the next batch of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: 'forEach((result: T, headers?: IHeaders, index?: number) => boolean | void)'
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    <span data-ttu-id="a5506-104">クエリから返される各項目の指定されたコールバックを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a5506-104">Calls a specified callback for each item returned from the query.</span></span>

    <span data-ttu-id="a5506-105">直列に実行されます各コールバックでは、次をブロックします。</span><span class="sxs-lookup"><span data-stu-id="a5506-105">Runs serially; each callback blocks the next.</span></span>
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        <span data-ttu-id="a5506-106">指定されたコールバック。</span><span class="sxs-lookup"><span data-stu-id="a5506-106">Specified callback.</span></span>

        <span data-ttu-id="a5506-107">最初のパラメーターは、結果、2 番目のパラメーター (省略可能) はヘッダー オブジェクトの現在の状態、3 番目のパラメーター (省略可能) は現在のインデックス。</span><span class="sxs-lookup"><span data-stu-id="a5506-107">First param is the result, second param (optional) is the current headers object state, third param (optional) is current index.</span></span>

        <span data-ttu-id="a5506-108">もうのコールバックではありませんが、それらのいずれかの結果が false 場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a5506-108">No more callbacks will be called if one of them results false.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator()
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="a5506-109">完了するまで結果を生成する非同期反復子を取得します。</span><span class="sxs-lookup"><span data-stu-id="a5506-109">Gets an async iterator that will yield results until completion.</span></span>

    <span data-ttu-id="a5506-110">注:AsyncIterators は非常に新しい機能と、コードで使用するために polyfils などを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a5506-110">NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code.</span></span>


    <span data-ttu-id="a5506-111">TypeScript を使用している場合は、ES6 ターゲット間またはそれ以降は、次のポリフィルを使用でき、ノード 6 以上を実行しています。</span><span class="sxs-lookup"><span data-stu-id="a5506-111">If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher.</span></span>


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults()
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="a5506-112">QueryIterator の次の要素で指定された関数を実行します。</span><span class="sxs-lookup"><span data-stu-id="a5506-112">Execute a provided function on the next element in the QueryIterator.</span></span>
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="a5506-113">最初に、QueryIterator をリセットし、その内部のすべてのリソースをクリア</span><span class="sxs-lookup"><span data-stu-id="a5506-113">Reset the QueryIterator to the beginning and clear all the resources inside it</span></span>
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="a5506-114">フィードのすべての要素を取得して、配列として関数に渡す</span><span class="sxs-lookup"><span data-stu-id="a5506-114">Retrieve all the elements of the feed and pass them as an array to a function</span></span>
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  name: Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>

### YamlMime:UniversalReference
ms.openlocfilehash: ef0a15814adb8ac1c36af0e1f26ebfb7d4ea6fca
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 12/13/2018
ms.locfileid: "52062807"
items:
- uid: '@azure/cosmos.QueryIterator'
  name: QueryIterator
  fullName: QueryIterator<T>
  children:
  - '@azure/cosmos.QueryIterator.current'
  - '@azure/cosmos.QueryIterator.executeNext'
  - '@azure/cosmos.QueryIterator.forEach'
  - '@azure/cosmos.QueryIterator.getAsyncIterator'
  - '@azure/cosmos.QueryIterator.hasMoreResults'
  - '@azure/cosmos.QueryIterator.nextItem'
  - '@azure/cosmos.QueryIterator.reset'
  - '@azure/cosmos.QueryIterator.toArray'
  langs:
  - typeScript
  type: class
  summary: QueryIterator オブジェクトを implmenetation のトラバーサルと、Azure Cosmos DB データベース サービスの応答に対する繰り返し処理できるフィードまたはクエリの応答を表します。
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.current'
  name: current()
  children: []
  type: method
  langs:
  - typeScript
  summary: 現在、QueryIterator 要素を取得します。
  syntax:
    content: function current()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.executeNext'
  name: executeNext()
  children: []
  type: method
  langs:
  - typeScript
  summary: フィードの次のバッチを取得し、関数を配列として渡す
  syntax:
    content: function executeNext()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.forEach'
  name: 'forEach((result: T, headers?: IHeaders, index?: number) => boolean | void)'
  children: []
  type: method
  langs:
  - typeScript
  summary: >-
    クエリから返される各項目の指定されたコールバックを呼び出します。

    直列に実行されます各コールバックでは、次をブロックします。
  syntax:
    content: 'function forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void)'
    parameters:
    - id: callback
      type:
      - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
      description: >
        指定されたコールバック。

        最初のパラメーターは、結果、2 番目のパラメーター (省略可能) はヘッダー オブジェクトの現在の状態、3 番目のパラメーター (省略可能) は現在のインデックス。

        もうのコールバックではありませんが、それらのいずれかの結果が false 場合に呼び出されます。
    return:
      type:
      - Promise<void>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
  name: getAsyncIterator()
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    完了するまで結果を生成する非同期反復子を取得します。

    注:AsyncIterators は非常に新しい機能と、コードで使用するために polyfils などを使用する必要があります。


    TypeScript を使用している場合は、ES6 ターゲット間またはそれ以降は、次のポリフィルを使用でき、ノード 6 以上を実行しています。


    ```typescript

    if (!Symbol || !Symbol.asyncIterator) {
      (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    ```
  syntax:
    content: function getAsyncIterator()
    parameters: []
    return:
      type:
      - AsyncIterable<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.hasMoreResults'
  name: hasMoreResults()
  children: []
  type: method
  langs:
  - typeScript
  summary: ''
  syntax:
    content: function hasMoreResults()
    parameters: []
    return:
      type:
      - boolean
  package: '@azure/cosmos'
  deprecated:
    content: >-
      Instead check if nextItem() or current() returns undefined.


      Determine if there are still remaining resources to processs based on the value of the continuation token or the\

      elements remaining on the current batch in the QueryIterator.
- uid: '@azure/cosmos.QueryIterator.nextItem'
  name: nextItem()
  children: []
  type: method
  langs:
  - typeScript
  summary: QueryIterator の次の要素で指定された関数を実行します。
  syntax:
    content: function nextItem()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T>>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.reset'
  name: reset()
  children: []
  type: method
  langs:
  - typeScript
  summary: 最初に、QueryIterator をリセットし、その内部のすべてのリソースをクリア
  syntax:
    content: function reset()
    parameters: []
  package: '@azure/cosmos'
- uid: '@azure/cosmos.QueryIterator.toArray'
  name: toArray()
  children: []
  type: method
  langs:
  - typeScript
  summary: フィードのすべての要素を取得して、配列として関数に渡す
  syntax:
    content: function toArray()
    parameters: []
    return:
      type:
      - Promise<@azure/cosmos.Response<T[]>>
  package: '@azure/cosmos'
references:
- uid: Promise<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: AsyncIterable<@azure/cosmos.Response<T>>
  name: Response<T>>
  spec.typeScript:
  - name: AsyncIterable<
    fullName: AsyncIterable<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T>>
    fullName: <T>>
- uid: Promise<@azure/cosmos.Response<T[]>>
  name: Response<T[]>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: Response
    fullName: Response
    uid: '@azure/cosmos.Response'
  - name: <T[]>>
    fullName: <T[]>>

### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isClosed'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.registerMessageHandler'
      - '@azure/service-bus.Receiver.renewMessageLock'
    langs:
      - typeScript
    type: class
    summary: |-
      バッチ内、またはハンドラーを登録することによって、メッセージを受信するレシーバー クラスを使用できます。
      使用して、`createReceiver`受信側のインスタンスを作成するには、QueueClient または SubscriptionClient 関数。
      レシーバー クラスでは、基になる AMQP 受信側リンク経由で抽象化が。
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      基になる AMQP 受信側リンクを閉じます。
      終了すると、その他の操作の受信側は使用できません。
      使用して、`createReceiver`新しいレシーバーをインスタンス化するには、QueueClient または SubscriptionClient 関数
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      受信側からのメッセージに対する非同期反復子を取得します。
      同じ受信側で進行中の別の受信操作がある場合は、エラーをスローします。 かわからない場合がありますが、受信操作の実行中、かどうかを確認、`isReceivingMessages`レシーバーのプロパティ。

      反復子は、1 分間に新しいメッセージをフェッチすることがない場合`undefined`が返されます。
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 返します`true`受信側が閉じている場合。 これは、いずれかのため、受信側自体が終了したか、作成した、クライアントが閉じられたに発生します。
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      かどうか、受信側が現在メッセージを受け取るかどうかを示します。
      場合、true を返します、新しい`registerMessageHandler()`または`receiveMessages()`呼び出しを行ったことはできません。
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: 識別される遅延メッセージに解決される promise を返します、指定された`sequenceNumber`します。
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 受信する必要があるメッセージのシーケンス番号。
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 識別される遅延メッセージの配列に解決される promise を返しますで`sequenceNumbers`します。
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 受信する必要があるメッセージのシーケンス番号の配列。
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      キュー/サブスクリプションからのリンクをメッセージの配列に解決される promise が AMQP の受信機を特定の数とタイムアウトにに基づいて返します。
      同じ受信側で進行中の別の受信操作がある場合は、エラーをスローします。 かわからない場合がありますが、受信操作の実行中、かどうかを確認、`isReceivingMessages`レシーバーのプロパティ。
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, idleTimeoutInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: キュー/サブスクリプションから受信するメッセージの最大数。
        - id: idleTimeoutInSeconds
          type:
            - undefined | number
          description: |-
            までの最大待機時間 (秒) の最初のメッセージを受信するを受信側が待機する必要があります。 この時点でメッセージを受信しなかった場合、返された約束は空の配列への解決を取得します。
            - **既定の**:`60`秒。
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: この受信者の receiveMode を表します。
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      AMQP の受信側リンク経由でキューまたはサブスクリプションからのメッセージの受信ストリームを処理するハンドラーを登録します。
      メッセージの受信を停止するには、呼び出す`close()`受信側でします。
      同じ受信側で進行中の別の受信操作がある場合は、エラーをスローします。 かわからない場合がありますが、受信操作の実行中、かどうかを確認、`isReceivingMessages`レシーバーのプロパティ。
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: MessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: 各受信メッセージを処理するハンドラー。
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: 受信またはメッセージの処理中に発生するエラーのハンドラー。
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: |
            コントロールの場合、メッセージは、自動的に完了する必要があります、またはがのロックが自動的に更新するオプション。 同時に処理する必要があるメッセージの最大数を制御できます。 (秒) を受信側を終了する前に、新しいメッセージを待機する時間の量を示すために、タイムアウトを指定することもできます。
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewMessageLock'
    name: renewMessageLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      キュー/サブスクリプションの作成時に指定された期間のメッセージに対するロックを更新します。
      - チェック、`lockedUntilUtc`ロックの有効期限が切れる時刻のメッセージのプロパティ。
      - メッセージが決済されていない場合 (いずれかを使用して`complete()`、`defer()`または`deadletter()`受信操作を次のキュー/サブスクリプションにメッセージが着いたら、そのロックが期限切れ前に、します。
    syntax:
      content: 'function renewMessageLock(lockTokenOrMessage: string | ServiceBusMessage)'
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: '`lockToken`メッセージまたはメッセージ自体のプロパティ。'
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
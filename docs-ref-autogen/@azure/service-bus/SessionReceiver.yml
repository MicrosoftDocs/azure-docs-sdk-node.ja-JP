### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      <span data-ttu-id="0d6c1-101">SessionReceiver クラスは、有効になっているセッションからメッセージを受信するために使用できますのキューまたはサブスクリプションのバッチ内、またはハンドラーを登録することで。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-101">The SessionReceiver class can be used to receive messages from a session enabled Queue or Subscription in a batch or by registering handlers.</span></span>
      <span data-ttu-id="0d6c1-102">使用して、 `createReceiver` SessionReceiver をインスタンス化するには、QueueClient または SubscriptionClient 関数。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-102">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a SessionReceiver.</span></span>
      <span data-ttu-id="0d6c1-103">SessionReceiver クラスは、基になる AMQP 受信側リンク経由で抽象化です。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-103">The SessionReceiver class is an abstraction over the underlying AMQP receiver link.</span></span>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0d6c1-104">基になる AMQP 受信側リンクを閉じます。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-104">Closes the underlying AMQP receiver link.</span></span>
      <span data-ttu-id="0d6c1-105">終了すると、その他の操作の受信側は使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-105">Once closed, the receiver cannot be used for any further operations.</span></span>
      <span data-ttu-id="0d6c1-106">使用して、`createReceiver`新しいレシーバーをインスタンス化するには、QueueClient または SubscriptionClient 関数</span><span class="sxs-lookup"><span data-stu-id="0d6c1-106">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a new Receiver</span></span>
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="0d6c1-107">受信側からのメッセージに対する非同期反復子を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-107">Gets an async iterator over messages from the receiver.</span></span>
      <span data-ttu-id="0d6c1-108">同じ受信側で進行中の別の受信操作がある場合は、エラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-108">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="0d6c1-109">かわからない場合がありますが、受信操作の実行中、かどうかを確認、`isReceivingMessages`レシーバーのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-109">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>

      <span data-ttu-id="0d6c1-110">反復子は、1 分間に新しいメッセージをフェッチすることがない場合`undefined`が返されます</span><span class="sxs-lookup"><span data-stu-id="0d6c1-110">If the iterator is not able to fetch a new message in over a minute, `undefined` will be returned</span></span>
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="0d6c1-111">セッションの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-111">Gets the state of the Session.</span></span> <span data-ttu-id="0d6c1-112">詳細については、セッションの状態は、次を参照してください[セッションの状態。](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span><span class="sxs-lookup"><span data-stu-id="0d6c1-112">For more on session states, see [Session State](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span></span>'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="0d6c1-113">返します`true`受信側が閉じている場合。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-113">Returns `true` if the receiver is closed.</span></span> <span data-ttu-id="0d6c1-114">これは、いずれかのため、受信側自体が終了したか、作成した、クライアントが閉じられたに発生します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-114">This can happen either because the receiver itself has been closed or the client that created it has been closed.</span></span>
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0d6c1-115">かどうか、受信側が現在メッセージを受け取るかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-115">Indicates whether the receiver is currently receiving messages or not.</span></span>
      <span data-ttu-id="0d6c1-116">場合、true を返します、新しい`registerMessageHandler()`または`receiveMessages()`呼び出しを行ったことはできません。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-116">When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.</span></span>
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0d6c1-117">アクティブなメッセージの次のバッチをフェッチ (配信不能メッセージではありませんが、遅延など)、現在のセッションでします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-117">Fetches the next batch of active messages (including deferred but not deadlettered messages) in the current session.</span></span>
      - <span data-ttu-id="0d6c1-118">最初の呼び出し`peek()`最初のアクティブなメッセージがフェッチされます。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-118">The first call to `peek()` fetches the first active message.</span></span> <span data-ttu-id="0d6c1-119">各後続の呼び出しでは、後続のメッセージをフェッチします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-119">Each subsequent call fetches the subsequent message.</span></span>
      - <span data-ttu-id="0d6c1-120">異なり、`received`メッセージ、`peeked`メッセージがメッセージの読み取り専用バージョン。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-120">Unlike a `received` message, `peeked` message is a read-only version of the message.</span></span>
      <span data-ttu-id="0d6c1-121">できません`Completed/Abandoned/Deferred/Deadlettered`します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-121">It cannot be `Completed/Abandoned/Deferred/Deadlettered`.</span></span> <span data-ttu-id="0d6c1-122">ロックを更新することはできません。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-122">The lock on it cannot be renewed.</span></span>
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: <span data-ttu-id="0d6c1-123">ピークするメッセージの最大数。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-123">The maximum number of messages to peek.</span></span> <span data-ttu-id="0d6c1-124">既定値`1`します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-124">Default value `1`.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0d6c1-125">目的の数のアクティブなメッセージをピークします (配信不能メッセージではありませんが、遅延など) 現在のセッションで指定されたシーケンス番号から。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-125">Peeks the desired number of active messages (including deferred but not deadlettered messages) from the specified sequence number in the current session.</span></span>
      - <span data-ttu-id="0d6c1-126">異なり、`received`メッセージ、`peeked`メッセージがメッセージの読み取り専用バージョン。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-126">Unlike a `received` message, `peeked` message is a read-only version of the message.</span></span>
      <span data-ttu-id="0d6c1-127">できません`Completed/Abandoned/Deferred/Deadlettered`します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-127">It cannot be `Completed/Abandoned/Deferred/Deadlettered`.</span></span> <span data-ttu-id="0d6c1-128">ロックを更新することはできません。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-128">The lock on it cannot be renewed.</span></span>
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: <span data-ttu-id="0d6c1-129">読み取る、メッセージ シーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-129">The sequence number from where to read the message.</span></span>
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="0d6c1-130">識別される遅延メッセージに解決される promise を返します、指定された`sequenceNumber`します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-130">Returns a promise that resolves to a deferred message identified by the given `sequenceNumber`.</span></span>
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: <span data-ttu-id="0d6c1-131">受信する必要があるメッセージのシーケンス番号。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-131">The sequence number of the message that needs to be received.</span></span>
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="0d6c1-132">識別される遅延メッセージの配列に解決される promise を返しますで`sequenceNumbers`します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-132">Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.</span></span>
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: <span data-ttu-id="0d6c1-133">受信する必要があるメッセージのシーケンス番号の配列。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-133">An array of sequence numbers for the messages that need to be received.</span></span>
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="0d6c1-134">キュー/サブスクリプションからのリンクをメッセージの配列に解決される promise が AMQP の受信機を特定の数とタイムアウトにに基づいて返します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-134">Returns a promise that resolves to an array of messages based on given count and timeout over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="0d6c1-135">同じ受信側で進行中の別の受信操作がある場合は、エラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-135">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="0d6c1-136">かわからない場合がありますが、受信操作の実行中、かどうかを確認、`isReceivingMessages`レシーバーのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-136">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: <span data-ttu-id="0d6c1-137">キュー/サブスクリプションから受信するメッセージの最大数。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-137">The maximum number of messages to receive from Queue/Subscription.</span></span>
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            <span data-ttu-id="0d6c1-138">までの最大待機時間 (秒) の最初のメッセージを受信するを受信側が待機する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-138">The maximum wait time in seconds for which the Receiver should wait to receive the first message.</span></span> <span data-ttu-id="0d6c1-139">この時点でメッセージを受信しなかった場合、返された約束は空の配列への解決を取得します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-139">If no message is received by this time, the returned promise gets resolved to an empty array.</span></span>
            - <span data-ttu-id="0d6c1-140">**既定の**:`60`秒。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-140">**Default**: `60` seconds.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="0d6c1-141">この受信者の receiveMode を表します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-141">Denotes receiveMode of this receiver.</span></span>
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="0d6c1-142">AMQP の受信側リンク経由でキューまたはサブスクリプションからのメッセージの受信ストリームを処理するハンドラーを登録します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-142">Registers handlers to deal with the incoming stream of messages over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="0d6c1-143">メッセージの受信を停止するには、呼び出す`close()`SessionReceiver にします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-143">To stop receiving messages, call `close()` on the SessionReceiver.</span></span>
      <span data-ttu-id="0d6c1-144">同じ受信側で進行中の別の受信操作がある場合は、エラーをスローします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-144">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="0d6c1-145">かわからない場合がありますが、受信操作の実行中、かどうかを確認、`isReceivingMessages`レシーバーのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-145">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: <span data-ttu-id="0d6c1-146">各受信メッセージを処理するハンドラー。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-146">Handler for processing each incoming message.</span></span>
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: <span data-ttu-id="0d6c1-147">受信またはメッセージの処理中に発生するエラーのハンドラー。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-147">Handler for any error that occurs while receiving or processing messages.</span></span>
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            <span data-ttu-id="0d6c1-148">メッセージに自動的に完了する必要があるかどうか、またはセッションのロックを自動的に更新する必要があるかどうかを制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-148">Options to control whether messages should be automatically completed or if the lock on the session should be automatically renewed.</span></span> <span data-ttu-id="0d6c1-149">同時に処理する必要があるメッセージの最大数を制御できます。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-149">You can control the maximum number of messages that should be concurrently processed.</span></span> <span data-ttu-id="0d6c1-150">(秒) を受信側を終了する前に、新しいメッセージを待機する時間の量を示すために、タイムアウトを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-150">You can also provide a timeout in seconds to denote the amount of time to wait for a new message before closing the receiver.</span></span>
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="0d6c1-151">キュー/サブスクリプションの作成時に指定された時間のセッションのロックを更新します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-151">Renews the lock on the session for the duration as specified during the Queue/Subscription creation.</span></span>
      - <span data-ttu-id="0d6c1-152">チェック、`sessionLockedUntilUtc`ロックの有効期限が切れる時刻の SessionReceiver プロパティ。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-152">Check the `sessionLockedUntilUtc` property on the SessionReceiver for the time when the lock expires.</span></span>
      - <span data-ttu-id="0d6c1-153">セッションのロックが期限切れにします。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-153">When the lock on the session expires</span></span>
          - <span data-ttu-id="0d6c1-154">このレシーバーを使用して、これ以上メッセージを受信できます。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-154">No more messages can be received using this receiver</span></span>
          - <span data-ttu-id="0d6c1-155">メッセージが決済されていない場合 (いずれかを使用して`complete()`、`defer()`または`deadletter()`セッションの前にロックの有効期限、し、次のキュー/サブスクリプションにメッセージの土地の受信操作。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-155">If a message is not settled (using either `complete()`, `defer()` or `deadletter()`, before the session lock expires, then the message lands back in the Queue/Subscription for the next receive operation.</span></span>
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      <span data-ttu-id="0d6c1-156">この受信者がメッセージを受信セッションの id。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-156">The id of the session from which this receiver will receive messages.</span></span>
      <span data-ttu-id="0d6c1-157">AMQP の受信側リンクが正常に設定されて、セッションのまでは undefined を返します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-157">Will return undefined until a AMQP receiver link has been successfully set up for the session.</span></span>
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      <span data-ttu-id="0d6c1-158">これまで、セッションがロックされている UTC 時刻。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-158">The time in UTC until which the session is locked.</span></span>
      <span data-ttu-id="0d6c1-159">されるたびに`renewSessionLock()`が呼び出されると、この時間を現在の時刻と指定されたロック期間中に更新されますキュー/サブスクリプションの作成。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-159">Everytime `renewSessionLock()` is called, this time gets updated to current time plus the lock duration as specified during the Queue/Subscription creation.</span></span>

      <span data-ttu-id="0d6c1-160">AMQP の受信側リンクが正常に設定されて、セッションのまでは undefined を返します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-160">Will return undefined until a AMQP receiver link has been successfully set up for the session.</span></span>
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="0d6c1-161">セッションの状態を設定します。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-161">Sets the state on the Session.</span></span> <span data-ttu-id="0d6c1-162">詳細については、セッションの状態は、次を参照してください[セッションの状態。](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span><span class="sxs-lookup"><span data-stu-id="0d6c1-162">For more on session states, see [Session State](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)</span></span>'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            <span data-ttu-id="0d6c1-163">状態を設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d6c1-163">The state that needs to be set.</span></span>
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'
### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104227"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="67d8d-101">この EventProcessorHost の適切なパーティションのリースを取得します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-101">Acquire the lease on the desired partition for this EventProcessorHost.</span></span>

    <span data-ttu-id="67d8d-102">別のホストが既に所有しているリースを取得することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="67d8d-102">Note that it is legal to acquire a lease that is already owned by another host.</span></span>

    <span data-ttu-id="67d8d-103">リース スティー リングは、追加のホストが開始されたときにパーティションが再配分方法です。</span><span class="sxs-lookup"><span data-stu-id="67d8d-103">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span>


    <span data-ttu-id="67d8d-104">既存の Azure Storage の実装を取得するか、同時に、リースを盗用しようとしています。 2 つのホスト インスタンスの間の競合が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="67d8d-104">The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time.</span></span> <span data-ttu-id="67d8d-105">2 つのホスト インスタンスの状況を回避するためには、リースを所有していること、取得が失敗するエラーのない場合は false を返すことによって、ため、ホスト インスタンスに、短期間のリースが所有していない疑いがある--起こり得る最悪のケースでは、ときに行う必要があります両方と考えています。</span><span class="sxs-lookup"><span data-stu-id="67d8d-105">To avoid situations where two host instances both believe that they own the lease, acquisition can fail without errors by returning false and should do so when there is any doubt -- the worst that can happen is that no host instance owns the lease for a short time.</span></span> <span data-ttu-id="67d8d-106">これは、定性的異なるなど、エラーは、アクセスの例外をスローする基になるストアです。</span><span class="sxs-lookup"><span data-stu-id="67d8d-106">This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error.</span></span>
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="67d8d-107">以前から取得した適切なパーティションの情報をリース`getLease()`します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-107">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-108">ストアに、リースの情報を作成、特定のパーティションが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="67d8d-108">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="67d8d-109">ストアに既に存在している場合何もありません。</span><span class="sxs-lookup"><span data-stu-id="67d8d-109">Do nothing if it does exist in the store already.</span></span>
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="67d8d-110">リース情報を作成するパーティションの id</span><span class="sxs-lookup"><span data-stu-id="67d8d-110">ids of partitions to create lease info for</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-111">存在しない場合は、リースのストアを作成します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-111">Create the lease store if it doesn't exist.</span></span> <span data-ttu-id="67d8d-112">存在する場合は機能しません。</span><span class="sxs-lookup"><span data-stu-id="67d8d-112">Do nothing if it does exist.</span></span>
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-113">ストアから特定のパーティションのリース情報を削除します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-113">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="67d8d-114">ストアドのリースを成功として扱われる特定のパーティションがない場合。</span><span class="sxs-lookup"><span data-stu-id="67d8d-114">If there is no stored lease for the given partition, that is treated as success.</span></span>
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="67d8d-115">以前から取得した適切なパーティションの情報をリース`getLease()`します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-115">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-116">リースのストアを削除します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-116">Delete lease store.</span></span>
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-117">ホストとのリースが期限切れかどうかを所有しているの名前を含むすべてのリースの軽量の BaseLease を返します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-117">Returns lightweight BaseLease for all leases, which includes name of owning host and whether lease is expired.</span></span> <span data-ttu-id="67d8d-118">実装は、「CompleteLease または CompleteLease、から派生した独自クラスを返すこと getAllLeases ができるだけ速く実行すること重要です。</span><span class="sxs-lookup"><span data-stu-id="67d8d-118">An implementation is free to return CompleteLease or its own class derived from CompleteLease, but it is important that getAllLeases run as fast as possible.</span></span> <span data-ttu-id="67d8d-119">場合を BaseLease に必要な情報のみを取得する高速化は、その作業を大きくお勧めします。</span><span class="sxs-lookup"><span data-stu-id="67d8d-119">If it is faster to obtain only the information required for a BaseLease, we heavily recommend doing that.</span></span>
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-120">指定されたパーティションのリース情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-120">Gets the lease info for the specified partition.</span></span> <span data-ttu-id="67d8d-121">返すことができます`undefined`指定したパーティションについて、ストア内にリースが作成されていない場合。</span><span class="sxs-lookup"><span data-stu-id="67d8d-121">Can return `undefined` if no lease has been created in the store for the specified partition.</span></span>
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="67d8d-122">リースを取得するパーティションの id。</span><span class="sxs-lookup"><span data-stu-id="67d8d-122">Partition id to get the lease for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: <span data-ttu-id="67d8d-123">{number} leaseDuration リース期間**秒単位で**更新しない限り、有効期限が切れる前にします。</span><span class="sxs-lookup"><span data-stu-id="67d8d-123">{number} leaseDuration Duration of a lease **in seconds** before it expires unless renewed.</span></span>
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    <span data-ttu-id="67d8d-124">{number} leaseRenewInterval スリープ間隔**秒単位で**スキャンの間。</span><span class="sxs-lookup"><span data-stu-id="67d8d-124">{number} leaseRenewInterval The sleep interval **in seconds** between scans.</span></span>


    <span data-ttu-id="67d8d-125">PartitionManager に、リースをスキャンしてそれらを更新する頻度を指定するリース マネージャーの実装を使用します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-125">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="67d8d-126">ホストが動作を中断した後は、適切なタイミングでリースを再配布するには 10 秒などの比較的短い間隔お勧めします。</span><span class="sxs-lookup"><span data-stu-id="67d8d-126">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="67d8d-127">明らかに偶発的な有効期限を防ぐために、リース期間の半分未満である必要があります。</span><span class="sxs-lookup"><span data-stu-id="67d8d-127">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span>
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="67d8d-128">リースのストアが存在か</span><span class="sxs-lookup"><span data-stu-id="67d8d-128">Does the lease store exist?</span></span>
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="67d8d-129">このホストで現在保持されているリースを提供します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-129">Give up a lease currently held by this host.</span></span>

    <span data-ttu-id="67d8d-130">リースが盗まれた場合、または有効期限が切れてされた場合はリリースする必要はありません、しようとするとに失敗します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-130">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span>
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="67d8d-131">以前から取得した適切なパーティションの情報をリース`getLease()`します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-131">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="67d8d-132">このホストで現在保持されているリースを更新します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-132">Renew a lease currently held by this host.</span></span>

    <span data-ttu-id="67d8d-133">リースが別のホスト インスタンス (盗難にあったまたは有効期限の後)、または明示的に解放された場合 renewLease は false を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="67d8d-133">If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false.</span></span> <span data-ttu-id="67d8d-134">作成されていない別のホストにより、実装で許可するか、期限切れのリースを更新することは、Azure Storage ベースの実装の方が便利です。</span><span class="sxs-lookup"><span data-stu-id="67d8d-134">With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient.</span></span> <span data-ttu-id="67d8d-135">そうでない場合は、renewLease が false を返します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-135">If it does not, renewLease should return false.</span></span>
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="67d8d-136">リースを更新します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-136">lease to be renewed.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="67d8d-137">指定されたリース情報で、ストアを更新します。</span><span class="sxs-lookup"><span data-stu-id="67d8d-137">Update the store with the information in the provided lease.</span></span>

    <span data-ttu-id="67d8d-138">更新するために現在のリースを保持する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67d8d-138">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="67d8d-139">リースが盗まれた、または有効期限が切れた、またはリリースを更新できません。</span><span class="sxs-lookup"><span data-stu-id="67d8d-139">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="67d8d-140">リース マネージャーの実装では、処理中にリースの有効期限を回避するために、更新プログラムを実行する前に、リースを更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="67d8d-140">Lease manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</span></span>
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="67d8d-141">格納する新しいリース情報。</span><span class="sxs-lookup"><span data-stu-id="67d8d-141">New lease information to be stored.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"

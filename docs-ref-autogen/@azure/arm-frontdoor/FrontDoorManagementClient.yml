### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient'
    name: FrontDoorManagementClient
    fullName: FrontDoorManagementClient
    children:
      - '@azure/arm-frontdoor.FrontDoorManagementClient.acceptLanguage'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.backendPools'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.beginLongRunningRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_2'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_1'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_2'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_1'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.credentials'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.endpoints'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.constructor'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.frontDoors'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.frontendEndpoints'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.healthProbeSettings'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.loadBalancingSettings'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.longRunningOperationRetryTimeout'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.policies'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.restoreLROPoller'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.routingRules'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendLongRunningRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendLRORequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendOperationRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.sendRequest'
      - '@azure/arm-frontdoor.FrontDoorManagementClient.subscriptionId'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/arm-frontdoor.FrontDoorManagementClientContext'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.backendPools'
    name: backendPools
    fullName: backendPools
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'backendPools: BackendPools'
      return:
        type:
          - '@azure/arm-frontdoor.BackendPools'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.beginLongRunningRequest'
    name: 'beginLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: (操作の実行時間が長い) LRO の最初の要求を送信し、LRO をポーリングし、LRO が終了したかどうかをチェックするメソッドを提供する、HttpLongRunningOperationResponse を取得します。
    syntax:
      content: 'function beginLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: 要求オブジェクト
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability'
    name: 'checkFrontDoorNameAvailability(CheckNameAvailabilityInput, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 玄関リソース名の可用性を確認します。
    syntax:
      content: 'function checkFrontDoorNameAvailability(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: 確認を入力します。
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_2'
    name: 'checkFrontDoorNameAvailability(CheckNameAvailabilityInput, RequestOptionsBase, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailability(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options: RequestOptionsBase, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: 確認を入力します。
        - id: options
          type:
            - RequestOptionsBase
          description: 省略可能なパラメーター
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailability_1'
    name: 'checkFrontDoorNameAvailability(CheckNameAvailabilityInput, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailability(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: 確認を入力します。
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription'
    name: 'checkFrontDoorNameAvailabilityWithSubscription(CheckNameAvailabilityInput, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 玄関サブドメインの可用性を確認します。
    syntax:
      content: 'function checkFrontDoorNameAvailabilityWithSubscription(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: 確認を入力します。
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityWithSubscriptionResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_2'
    name: 'checkFrontDoorNameAvailabilityWithSubscription(CheckNameAvailabilityInput, RequestOptionsBase, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailabilityWithSubscription(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, options: RequestOptionsBase, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: 確認を入力します。
        - id: options
          type:
            - RequestOptionsBase
          description: 省略可能なパラメーター
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityWithSubscriptionResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.checkFrontDoorNameAvailabilityWithSubscription_1'
    name: 'checkFrontDoorNameAvailabilityWithSubscription(CheckNameAvailabilityInput, ServiceCallback<CheckNameAvailabilityOutput>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkFrontDoorNameAvailabilityWithSubscription(checkFrontDoorNameAvailabilityInput: CheckNameAvailabilityInput, callback: ServiceCallback<CheckNameAvailabilityOutput>)'
      parameters:
        - id: checkFrontDoorNameAvailabilityInput
          type:
            - '@azure/arm-frontdoor.CheckNameAvailabilityInput'
          description: 確認を入力します。
        - id: callback
          type:
            - ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
          description: |
            コールバック
      return:
        type:
          - Promise<Models.CheckFrontDoorNameAvailabilityWithSubscriptionResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.endpoints'
    name: endpoints
    fullName: endpoints
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'endpoints: Endpoints'
      return:
        type:
          - '@azure/arm-frontdoor.Endpoints'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.constructor'
    name: 'FrontDoorManagementClient(ServiceClientCredentials, string, Models.FrontDoorManagementClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: FrontDoorManagementClient クラスの新しいインスタンスを初期化します。
    syntax:
      content: 'new FrontDoorManagementClient(credentials: ServiceClientCredentials, subscriptionId: string, options?: Models.FrontDoorManagementClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: Azure に接続するクライアントに必要な資格情報。
        - id: subscriptionId
          type:
            - string
          description: Microsoft Azure サブスクリプションを一意に識別するサブスクリプションの資格情報。 サブスクリプション ID は、全ての修理依頼についてURI の一部を生じさせます。
        - id: options
          type:
            - Models.FrontDoorManagementClientOptions
          description: ''
          optional: true
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.frontDoors'
    name: frontDoors
    fullName: frontDoors
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'frontDoors: FrontDoors'
      return:
        type:
          - '@azure/arm-frontdoor.FrontDoors'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.frontendEndpoints'
    name: frontendEndpoints
    fullName: frontendEndpoints
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'frontendEndpoints: FrontendEndpoints'
      return:
        type:
          - '@azure/arm-frontdoor.FrontendEndpoints'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.healthProbeSettings'
    name: healthProbeSettings
    fullName: healthProbeSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'healthProbeSettings: HealthProbeSettings'
      return:
        type:
          - '@azure/arm-frontdoor.HealthProbeSettings'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.loadBalancingSettings'
    name: loadBalancingSettings
    fullName: loadBalancingSettings
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'loadBalancingSettings: LoadBalancingSettings'
      return:
        type:
          - '@azure/arm-frontdoor.LoadBalancingSettings'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: 長時間実行される操作の秒の再試行タイムアウト。 既定値は 30 です。
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.policies'
    name: policies
    fullName: policies
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'policies: Policies'
      return:
        type:
          - '@azure/arm-frontdoor.Policies'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: 指定された LROPollState から、LROPoller を復元します。 このメソッドは、別のプロセスやマシンで、LROPoller を再作成に使用できます。
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.routingRules'
    name: routingRules
    fullName: routingRules
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'routingRules: RoutingRules'
      return:
        type:
          - '@azure/arm-frontdoor.RoutingRules'
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendLongRunningRequest'
    name: 'sendLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ポーリングされ、最終的な結果を提供する要求を作成するためのメカニズムを提供します。
    syntax:
      content: 'function sendLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: 要求オブジェクト
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: (操作の実行時間が長い) LRO の最初の要求を送信し、LRO をポーリングし、LRO が終了したかどうかをチェックするメソッドを提供する、LROPoller を取得します。
    syntax:
      content: 'function sendLRORequest(operationArguments: OperationArguments, operationSpec: OperationSpec, options?: RequestOptionsBase)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: 操作の引数。
        - id: operationSpec
          type:
            - OperationSpec
          description: 操作を指定します。
        - id: options
          type:
            - RequestOptionsBase
          description: 要求時に送信される追加のオプション。
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 指定された OperationSpec を使用して設定される HTTP 要求を送信します。
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: この引数から HTTP 要求のテンプレート化された値が設定されます。
        - id: operationSpec
          type:
            - OperationSpec
          description: 使用して設定、httpRequest OperationSpec します。
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            応答が受信されたときに呼び出すコールバック。
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: 指定された httpRequest を送信します。
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-frontdoor'
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClient.subscriptionId'
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
    package: '@azure/arm-frontdoor'
references:
  - uid: '@azure/arm-frontdoor.FrontDoorManagementClientContext'
    name: FrontDoorManagementClientContext
    spec.typeScript:
      - name: FrontDoorManagementClientContext
        fullName: FrontDoorManagementClientContext
        uid: '@azure/arm-frontdoor.FrontDoorManagementClientContext'
  - uid: '@azure/arm-frontdoor.BackendPools'
    name: BackendPools
    spec.typeScript:
      - name: BackendPools
        fullName: BackendPools
        uid: '@azure/arm-frontdoor.BackendPools'
  - uid: '@azure/arm-frontdoor.Endpoints'
    name: Endpoints
    spec.typeScript:
      - name: Endpoints
        fullName: Endpoints
        uid: '@azure/arm-frontdoor.Endpoints'
  - uid: '@azure/arm-frontdoor.FrontDoors'
    name: FrontDoors
    spec.typeScript:
      - name: FrontDoors
        fullName: FrontDoors
        uid: '@azure/arm-frontdoor.FrontDoors'
  - uid: '@azure/arm-frontdoor.FrontendEndpoints'
    name: FrontendEndpoints
    spec.typeScript:
      - name: FrontendEndpoints
        fullName: FrontendEndpoints
        uid: '@azure/arm-frontdoor.FrontendEndpoints'
  - uid: '@azure/arm-frontdoor.HealthProbeSettings'
    name: HealthProbeSettings
    spec.typeScript:
      - name: HealthProbeSettings
        fullName: HealthProbeSettings
        uid: '@azure/arm-frontdoor.HealthProbeSettings'
  - uid: '@azure/arm-frontdoor.LoadBalancingSettings'
    name: LoadBalancingSettings
    spec.typeScript:
      - name: LoadBalancingSettings
        fullName: LoadBalancingSettings
        uid: '@azure/arm-frontdoor.LoadBalancingSettings'
  - uid: '@azure/arm-frontdoor.Policies'
    name: Policies
    spec.typeScript:
      - name: Policies
        fullName: Policies
        uid: '@azure/arm-frontdoor.Policies'
  - uid: '@azure/arm-frontdoor.RoutingRules'
    name: RoutingRules
    spec.typeScript:
      - name: RoutingRules
        fullName: RoutingRules
        uid: '@azure/arm-frontdoor.RoutingRules'
  - uid: '@azure/arm-frontdoor.CheckNameAvailabilityInput'
    name: CheckNameAvailabilityInput
    spec.typeScript:
      - name: CheckNameAvailabilityInput
        fullName: CheckNameAvailabilityInput
        uid: '@azure/arm-frontdoor.CheckNameAvailabilityInput'
  - uid: ServiceCallback<@azure/arm-frontdoor.CheckNameAvailabilityOutput>
    name: CheckNameAvailabilityOutput>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CheckNameAvailabilityOutput
        fullName: CheckNameAvailabilityOutput
        uid: '@azure/arm-frontdoor.CheckNameAvailabilityOutput'
      - name: '>'
        fullName: '>'